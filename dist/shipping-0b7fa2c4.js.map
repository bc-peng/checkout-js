{"version":3,"file":"shipping-0b7fa2c4.js","mappings":"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","sources":["webpack://checkout/./packages/core/src/app/common/dom/getAppliedStyles.ts","webpack://checkout/./packages/core/src/app/common/form/connectFormik.tsx","webpack://checkout/./packages/core/src/app/common/utility/parseAnchor.ts","webpack://checkout/./packages/core/src/app/locale/TranslatedLink.tsx","webpack://checkout/./packages/core/src/app/shipping/errors/UnassignItemError.ts","webpack://checkout/./packages/core/src/app/shipping/getShippingMethodId.ts","webpack://checkout/./packages/core/src/app/address/AddressFormModal.tsx","webpack://checkout/./packages/core/src/app/shipping/errors/AssignItemInvalidAddressError.ts","webpack://checkout/./packages/core/src/app/shipping/errors/AssignItemFailedError.ts","webpack://checkout/./packages/core/src/app/shipping/findConsignment.ts","webpack://checkout/./packages/core/src/app/shipping/getShippableLineItems.ts","webpack://checkout/./packages/core/src/app/shipping/ItemAddressSelect.tsx","webpack://checkout/./packages/core/src/app/shipping/getRecommendedShippingOption.ts","webpack://checkout/./packages/core/src/app/shipping/shippingOption/ShippingOptionsList.tsx","webpack://checkout/./packages/core/src/app/shipping/shippingOption/ShippingOptionsForm.tsx","webpack://checkout/./packages/core/src/app/shipping/shippingOption/ShippingOptions.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingFormFooter.tsx","webpack://checkout/./packages/core/src/app/shipping/updateShippableItems.ts","webpack://checkout/./packages/core/src/app/shipping/MultiShippingForm.tsx","webpack://checkout/./packages/core/src/app/shipping/BillingSameAsShippingField.tsx","webpack://checkout/./packages/core/src/app/shipping/RemoteShippingAddress.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingAddressForm.tsx","webpack://checkout/./packages/core/src/app/shipping/StaticAddressEditable.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingAddress.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingAddressFields.ts","webpack://checkout/./packages/core/src/app/shipping/SingleShippingForm.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingForm.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingHeader.tsx","webpack://checkout/./packages/core/src/app/shipping/stripeUPE/StripeShippingAddressDisplay.tsx","webpack://checkout/./packages/core/src/app/shipping/stripeUPE/StripeShippingAddress.tsx","webpack://checkout/./packages/core/src/app/shipping/stripeUPE/StripeStateMapper.ts","webpack://checkout/./packages/core/src/app/shipping/stripeUPE/StripeShippingForm.tsx","webpack://checkout/./packages/core/src/app/shipping/stripeUPE/StripeShipping.tsx","webpack://checkout/./packages/core/src/app/shipping/Shipping.tsx","webpack://checkout/./packages/core/src/app/ui/accordion/AccordionContext.tsx","webpack://checkout/./packages/core/src/app/ui/accordion/Accordion.tsx","webpack://checkout/./packages/core/src/app/ui/form/Checklist.tsx","webpack://checkout/./packages/core/src/app/ui/accordion/AccordionItem.tsx","webpack://checkout/./packages/core/src/app/ui/form/ChecklistItemInput.tsx","webpack://checkout/./packages/core/src/app/ui/form/ChecklistItem.tsx"],"sourcesContent":["import { kebabCase } from 'lodash';\n\nexport default function getAppliedStyles(\n    element: HTMLElement,\n    properties: string[],\n): { [key: string]: string } {\n    const declaration = window.getComputedStyle(element);\n\n    return properties.reduce(\n        (result, propertyName) => ({\n            ...result,\n            [propertyName]: declaration.getPropertyValue(kebabCase(propertyName)),\n        }),\n        {},\n    );\n}\n","import { connect } from 'formik';\nimport React, { ComponentType, FunctionComponent, memo } from 'react';\nimport shallowEqual from 'shallowequal';\n\nimport ConnectFormikProps from './ConnectFormikProps';\n\nexport default function connectFormik<TProps extends ConnectFormikProps<TValues>, TValues = any>(\n    OriginalComponent: ComponentType<TProps>,\n): ComponentType<Omit<TProps, keyof ConnectFormikProps<TValues>>> {\n    const InnerComponent: FunctionComponent<TProps> = memo(\n        (props) => <OriginalComponent {...props} />,\n        ({ formik: prevFormik, ...prevProps }, { formik: nextFormik, ...nextProps }) =>\n            shallowEqual(prevFormik, nextFormik) && shallowEqual(prevProps, nextProps),\n    );\n\n    const DecoratedComponent = connect<TProps, TValues>(InnerComponent) as ComponentType<\n        Omit<TProps, keyof ConnectFormikProps<TValues>>\n    >;\n\n    DecoratedComponent.displayName = `ConnectFormik(${\n        OriginalComponent.displayName || OriginalComponent.name\n    })`;\n\n    return DecoratedComponent;\n}\n","export default function parseAnchor(text: string): string[] {\n    const div = document.createElement('div');\n\n    div.innerHTML = text;\n\n    const anchor = div.querySelector('a');\n\n    if (!anchor) {\n        return [];\n    }\n\n    const anchorSiblings = div.innerHTML.split(anchor.outerHTML);\n\n    return [anchorSiblings[0], anchor.text, anchorSiblings[1]];\n}\n","import React, { FunctionComponent, MouseEventHandler } from 'react';\n\nimport { preventDefault } from '../common/dom';\nimport { parseAnchor } from '../common/utility';\n\nimport { TranslatedStringProps } from './TranslatedString';\nimport withLanguage, { WithLanguageProps } from './withLanguage';\n\nexport type TranslatedLinkProps = TranslatedStringProps & {\n    testId?: string;\n    onClick: MouseEventHandler;\n};\n\nconst TranslatedLink: FunctionComponent<TranslatedLinkProps & WithLanguageProps> = ({\n    data,\n    id,\n    language,\n    onClick,\n    testId,\n}) => {\n    const translatedString = language.translate(id, data);\n    const parsedString = parseAnchor(translatedString);\n\n    return parsedString.length ? (\n        <>\n            {parsedString[0]}\n            <a data-test={testId} href=\"#\" onClick={preventDefault(onClick)}>\n                {parsedString[1]}\n            </a>\n            {parsedString[2]}\n        </>\n    ) : (\n        <>{translatedString}</>\n    );\n};\n\nexport default withLanguage(TranslatedLink);\n","import { CustomError, setPrototypeOf } from '../../common/error';\nimport { getLanguageService } from '../../locale';\n\nexport default class UnassignItemError extends CustomError {\n    constructor(data: Error) {\n        super({\n            name: 'UNASSIGN_ITEM_FAILED',\n            message: getLanguageService().translate('shipping.unassign_item_error'),\n            data,\n        });\n\n        setPrototypeOf(this, UnassignItemError.prototype);\n    }\n}\n","import { Checkout } from '@bigcommerce/checkout-sdk';\n\nimport { getPreselectedPayment } from '../payment';\n\nexport default function getShippingMethodId(checkout: Checkout): string | undefined {\n    const SHIPPING_METHOD_IDS = ['amazon', 'amazonpay'];\n    const preselectedPayment = getPreselectedPayment(checkout);\n\n    return preselectedPayment && SHIPPING_METHOD_IDS.indexOf(preselectedPayment.providerId) > -1\n        ? preselectedPayment.providerId\n        : undefined;\n}\n","import { Country, FormField } from '@bigcommerce/checkout-sdk';\nimport { FormikProps, withFormik } from 'formik';\nimport React, { FunctionComponent } from 'react';\nimport { lazy } from 'yup';\n\nimport { preventDefault } from '../common/dom';\nimport { TranslatedString, withLanguage, WithLanguageProps } from '../locale';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { Form } from '../ui/form';\nimport { LoadingOverlay } from '../ui/loading';\nimport { Modal, ModalHeader } from '../ui/modal';\n\nimport AddressForm from './AddressForm';\nimport getAddressFormFieldsValidationSchema from './getAddressFormFieldsValidationSchema';\nimport { AddressFormValues } from './mapAddressToFormValues';\n\nexport interface AddressFormModalProps extends AddressFormProps {\n    isOpen: boolean;\n    onAfterOpen?(): void;\n}\n\nexport interface AddressFormProps {\n    countries?: Country[];\n    countriesWithAutocomplete: string[];\n    googleMapsApiKey?: string;\n    isLoading: boolean;\n    shouldShowSaveAddress?: boolean;\n    defaultCountryCode?: string;\n    useFloatingLabel?: boolean;\n    getFields(countryCode?: string): FormField[];\n    onSaveAddress(address: AddressFormValues): void;\n    onRequestClose?(): void;\n}\n\nconst SaveAddress: FunctionComponent<\n    AddressFormProps & WithLanguageProps & FormikProps<AddressFormValues>\n> = ({\n    googleMapsApiKey,\n    getFields,\n    countriesWithAutocomplete,\n    countries,\n    values,\n    setFieldValue,\n    isLoading,\n    onRequestClose,\n    useFloatingLabel,\n}) => (\n    <Form autoComplete=\"on\">\n        <LoadingOverlay isLoading={isLoading}>\n            <AddressForm\n                countries={countries}\n                countriesWithAutocomplete={countriesWithAutocomplete}\n                countryCode={values.countryCode}\n                formFields={getFields(values.countryCode)}\n                googleMapsApiKey={googleMapsApiKey}\n                setFieldValue={setFieldValue}\n                shouldShowSaveAddress={false}\n                useFloatingLabel={useFloatingLabel}\n            />\n            <div className=\"form-actions\">\n                <a\n                    className=\"button optimizedCheckout-buttonSecondary\"\n                    href=\"#\"\n                    onClick={preventDefault(onRequestClose)}\n                >\n                    <TranslatedString id=\"common.cancel_action\" />\n                </a>\n\n                <Button\n                    disabled={isLoading}\n                    id=\"checkout-save-address\"\n                    type=\"submit\"\n                    variant={ButtonVariant.Primary}\n                >\n                    <TranslatedString id=\"address.save_address_action\" />\n                </Button>\n            </div>\n        </LoadingOverlay>\n    </Form>\n);\n\nconst SaveAddressForm = withLanguage(\n    withFormik<AddressFormProps & WithLanguageProps, AddressFormValues>({\n        handleSubmit: (values, { props: { onSaveAddress } }) => {\n            onSaveAddress(values);\n        },\n        mapPropsToValues: ({ defaultCountryCode = '' }) => ({\n            firstName: '',\n            lastName: '',\n            address1: '',\n            address2: '',\n            customFields: {},\n            country: '',\n            countryCode: defaultCountryCode,\n            stateOrProvince: '',\n            stateOrProvinceCode: '',\n            postalCode: '',\n            phone: '',\n            city: '',\n            company: '',\n            shouldSaveAddress: false,\n        }),\n        validationSchema: ({ language, getFields }: AddressFormProps & WithLanguageProps) =>\n            lazy<Partial<AddressFormValues>>((values) =>\n                getAddressFormFieldsValidationSchema({\n                    language,\n                    formFields: getFields(values && values.countryCode),\n                }),\n            ),\n    })(SaveAddress),\n);\n\nconst AddressFormModal: FunctionComponent<AddressFormModalProps> = ({\n    isOpen,\n    onAfterOpen,\n    onRequestClose,\n    ...addressFormProps\n}) => (\n    <Modal\n        additionalModalClassName=\"modal--medium\"\n        header={\n            <ModalHeader>\n                <TranslatedString id=\"address.add_address_heading\" />\n            </ModalHeader>\n        }\n        isOpen={isOpen}\n        onAfterOpen={onAfterOpen}\n        onRequestClose={onRequestClose}\n        shouldShowCloseButton={true}\n    >\n        <SaveAddressForm {...addressFormProps} onRequestClose={onRequestClose} />\n    </Modal>\n);\n\nexport default AddressFormModal;\n","import { CustomError, setPrototypeOf } from '../../common/error';\nimport { getLanguageService } from '../../locale';\n\nexport default class AssignItemInvalidAddressError extends CustomError {\n    constructor(data?: Error) {\n        super({\n            name: 'ASSIGN_ITEM_INVALID_ADDRESS',\n            message: getLanguageService().translate('shipping.assign_item_invalid_address_error'),\n            title: getLanguageService().translate(\n                'shipping.assign_item_invalid_address_error_heading',\n            ),\n            data,\n        });\n\n        setPrototypeOf(this, AssignItemInvalidAddressError.prototype);\n    }\n}\n","import { CustomError, setPrototypeOf } from '../../common/error';\nimport { getLanguageService } from '../../locale';\n\nexport default class AssignItemFailedError extends CustomError {\n    constructor(data: Error) {\n        super({\n            name: 'ASSIGN_ITEM_FAILED',\n            message: getLanguageService().translate('shipping.assign_item_error'),\n            data,\n        });\n\n        setPrototypeOf(this, AssignItemFailedError.prototype);\n    }\n}\n","import { Consignment } from '@bigcommerce/checkout-sdk';\nimport { find, includes } from 'lodash';\n\nexport default function findConsignment(\n    consignments: Consignment[],\n    itemId: string,\n): Consignment | undefined {\n    return find(consignments, (consignment) => includes(consignment.lineItemIds, itemId));\n}\n","import { Cart, Consignment, PhysicalItem } from '@bigcommerce/checkout-sdk';\nimport { isNil, reduce } from 'lodash';\n\nimport findConsignment from './findConsignment';\nimport ShippableItem from './ShippableItem';\n\nexport default function getShippableLineItems(\n    cart: Cart,\n    consignments: Consignment[],\n): ShippableItem[] {\n    return reduce(\n        (cart && cart.lineItems.physicalItems) || [],\n        (result, item, i) =>\n            !item.addedByPromotion && isNil(item.parentId)\n                ? result.concat(...splitItem(item, consignments, i))\n                : result,\n        [] as ShippableItem[],\n    );\n}\n\nfunction splitItem(\n    item: PhysicalItem,\n    consignments: Consignment[],\n    lineItemIndex: number,\n): ShippableItem[] {\n    let splitItems: ShippableItem[] = [];\n    const consignment = findConsignment(consignments, item.id as string);\n\n    for (let i = 0; i < item.quantity; i++) {\n        splitItems = splitItems.concat({\n            ...item,\n            key: `${item.variantId}-${item.productId}-${lineItemIndex}-${i}`,\n            consignment,\n            quantity: 1,\n        });\n    }\n\n    return splitItems;\n}\n","import { Address, CustomerAddress } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, memo, useCallback } from 'react';\n\nimport { AddressSelect } from '../address';\n\nimport ShippableItem from './ShippableItem';\n\nexport interface ItemAddressSelectProps {\n    item: ShippableItem;\n    addresses: CustomerAddress[];\n    onSelectAddress(address: Address, itemId: string, itemKey: string): void;\n    onUseNewAddress(address: Address | undefined, itemId: string, itemKey: string): void;\n}\n\nconst ItemAddressSelect: FunctionComponent<ItemAddressSelectProps> = ({\n    item: { id, key, imageUrl, quantity, name, options, consignment },\n    addresses,\n    onSelectAddress,\n    onUseNewAddress,\n}) => {\n    const handleUseNewAddress = useCallback(\n        (address: Address) => {\n            onUseNewAddress(address, id as string, key);\n        },\n        [id, onUseNewAddress, key],\n    );\n\n    const handleSelectAddress = useCallback(\n        (address: Address) => {\n            onSelectAddress(address, id as string, key);\n        },\n        [id, key, onSelectAddress],\n    );\n\n    return (\n        <div className=\"consignment\">\n            <figure className=\"consignment-product-figure\">\n                {imageUrl && <img alt={name} src={imageUrl} />}\n            </figure>\n\n            <div className=\"consignment-product-body\">\n                <h4 className=\"optimizedCheckout-contentPrimary\">{`${quantity} x ${name}`}</h4>\n\n                {(options || []).map(({ name: optionName, value, nameId }) => (\n                    <ul\n                        className=\"product-options optimizedCheckout-contentSecondary\"\n                        data-test=\"consigment-item-product-options\"\n                        key={nameId}\n                    >\n                        <li className=\"product-option\">{`${optionName} ${value}`}</li>\n                    </ul>\n                ))}\n\n                <AddressSelect\n                    addresses={addresses}\n                    onSelectAddress={handleSelectAddress}\n                    onUseNewAddress={handleUseNewAddress}\n                    selectedAddress={consignment && consignment.shippingAddress}\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default memo(ItemAddressSelect);\n","import { ShippingOption } from '@bigcommerce/checkout-sdk';\n\nexport default function getRecommendedShippingOption(\n    availableShippingOptions: ShippingOption[],\n): ShippingOption | undefined {\n    if (!availableShippingOptions) {\n        return;\n    }\n\n    return availableShippingOptions.find(\n        ({ isRecommended }: { isRecommended: any }) => isRecommended,\n    );\n}\n","import { ShippingOption } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, memo, useCallback } from 'react';\n\nimport { EMPTY_ARRAY } from '../../common/utility';\nimport { Checklist, ChecklistItem } from '../../ui/form';\nimport { LoadingOverlay } from '../../ui/loading';\n\nimport StaticShippingOption from './StaticShippingOption';\n\ninterface ShippingOptionListItemProps {\n    consignmentId: string;\n    shippingOption: ShippingOption;\n}\n\nconst ShippingOptionListItem: FunctionComponent<ShippingOptionListItemProps> = ({\n    consignmentId,\n    shippingOption,\n}) => {\n    const renderLabel = useCallback(\n        () => (\n            <div className=\"shippingOptionLabel\">\n                <StaticShippingOption displayAdditionalInformation={true} method={shippingOption} />\n            </div>\n        ),\n        [shippingOption],\n    );\n\n    return (\n        <ChecklistItem\n            htmlId={`shippingOptionRadio-${consignmentId}-${shippingOption.id}`}\n            label={renderLabel}\n            value={shippingOption.id}\n        />\n    );\n};\n\nexport interface ShippingOptionListProps {\n    consignmentId: string;\n    inputName: string;\n    isLoading: boolean;\n    selectedShippingOptionId?: string;\n    shippingOptions?: ShippingOption[];\n    onSelectedOption(consignmentId: string, shippingOptionId: string): void;\n}\n\nconst ShippingOptionsList: FunctionComponent<ShippingOptionListProps> = ({\n    consignmentId,\n    inputName,\n    isLoading,\n    shippingOptions = EMPTY_ARRAY,\n    selectedShippingOptionId,\n    onSelectedOption,\n}) => {\n    const handleSelect = useCallback(\n        (value: string) => {\n            onSelectedOption(consignmentId, value);\n        },\n        [consignmentId, onSelectedOption],\n    );\n\n    if (!shippingOptions.length) {\n        return null;\n    }\n\n    return (\n        <LoadingOverlay isLoading={isLoading}>\n            <Checklist\n                aria-live=\"polite\"\n                defaultSelectedItemId={selectedShippingOptionId}\n                name={inputName}\n                onSelect={handleSelect}\n            >\n                {shippingOptions.map((shippingOption) => (\n                    <ShippingOptionListItem\n                        consignmentId={consignmentId}\n                        key={shippingOption.id}\n                        shippingOption={shippingOption}\n                    />\n                ))}\n            </Checklist>\n        </LoadingOverlay>\n    );\n};\n\nexport default memo(ShippingOptionsList);\n","import { CheckoutSelectors, Consignment } from '@bigcommerce/checkout-sdk';\nimport { FormikProps, withFormik } from 'formik';\nimport { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\n\nimport { ChecklistSkeleton } from '@bigcommerce/checkout/ui';\n\nimport { StaticAddress } from '../../address';\nimport { TranslatedString } from '../../locale';\nimport getRecommendedShippingOption from '../getRecommendedShippingOption';\nimport StaticConsignmentItemList from '../StaticConsignmentItemList';\n\nimport { ShippingOptionsProps, WithCheckoutShippingOptionsProps } from './ShippingOptions';\nimport './ShippingOptionsForm.scss';\nimport ShippingOptionsList from './ShippingOptionsList';\n\nexport type ShippingOptionsFormProps = ShippingOptionsProps & WithCheckoutShippingOptionsProps;\n\nclass ShippingOptionsForm extends PureComponent<\n    ShippingOptionsFormProps & FormikProps<ShippingOptionsFormValues>\n> {\n    private unsubscribe?: () => void;\n\n    componentDidMount(): void {\n        const { subscribeToConsignments } = this.props;\n\n        this.unsubscribe = subscribeToConsignments(this.selectDefaultShippingOptions);\n    }\n\n    componentWillUnmount(): void {\n        if (this.unsubscribe) {\n            this.unsubscribe();\n            this.unsubscribe = undefined;\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            consignments,\n            isMultiShippingMode,\n            selectShippingOption,\n            isLoading,\n            shouldShowShippingOptions,\n            invalidShippingMessage,\n            methodId,\n        } = this.props;\n\n        if (!consignments || !consignments.length || !shouldShowShippingOptions) {\n            return (\n                <ChecklistSkeleton\n                    additionalClassName=\"shippingOptions-skeleton\"\n                    isLoading={isLoading()}\n                    rows={2}\n                >\n                    {this.renderNoShippingOptions(\n                        <TranslatedString\n                            id={\n                                methodId || isMultiShippingMode\n                                    ? 'shipping.select_shipping_address_text'\n                                    : 'shipping.enter_shipping_address_text'\n                            }\n                        />,\n                    )}\n                </ChecklistSkeleton>\n            );\n        }\n\n        return (\n            <>\n                {consignments.map((consignment) => (\n                    <div className=\"shippingOptions-container form-fieldset\" key={consignment.id}>\n                        {isMultiShippingMode && this.renderConsignment(consignment)}\n\n                        <ShippingOptionsList\n                            consignmentId={consignment.id}\n                            inputName={getRadioInputName(consignment.id)}\n                            isLoading={isLoading(consignment.id)}\n                            onSelectedOption={selectShippingOption}\n                            selectedShippingOptionId={\n                                consignment.selectedShippingOption &&\n                                consignment.selectedShippingOption.id\n                            }\n                            shippingOptions={consignment.availableShippingOptions}\n                        />\n\n                        {(!consignment.availableShippingOptions ||\n                            !consignment.availableShippingOptions.length) && (\n                            <ChecklistSkeleton\n                                additionalClassName=\"shippingOptions-skeleton\"\n                                isLoading={isLoading(consignment.id)}\n                                rows={2}\n                            >\n                                {this.renderNoShippingOptions(invalidShippingMessage)}\n                            </ChecklistSkeleton>\n                        )}\n                    </div>\n                ))}\n            </>\n        );\n    }\n\n    private selectDefaultShippingOptions: (state: CheckoutSelectors) => void = async ({ data }) => {\n        const { selectShippingOption, setFieldValue } = this.props;\n\n        const consignment = (data.getConsignments() || []).find(\n            ({ selectedShippingOption, availableShippingOptions: shippingOptions }) =>\n                !selectedShippingOption && shippingOptions,\n        );\n\n        if (!consignment || !consignment.availableShippingOptions) {\n            return;\n        }\n\n        const { availableShippingOptions, id } = consignment;\n        const recommendedOption = getRecommendedShippingOption(availableShippingOptions);\n        const singleShippingOption =\n            availableShippingOptions.length === 1 && availableShippingOptions[0];\n        const defaultShippingOption = recommendedOption || singleShippingOption;\n\n        if (!defaultShippingOption) {\n            return;\n        }\n\n        await selectShippingOption(id, defaultShippingOption.id);\n        setFieldValue(`shippingOptionIds.${id}`, defaultShippingOption.id);\n    };\n\n    private renderNoShippingOptions(message: ReactNode): ReactNode {\n        return (\n            <div className=\"shippingOptions-panel optimizedCheckout-overlay\">\n                <p\n                    aria-live=\"polite\"\n                    className=\"shippingOptions-panel-message optimizedCheckout-primaryContent\"\n                    role=\"alert\"\n                >\n                    {message}\n                </p>\n            </div>\n        );\n    }\n\n    private renderConsignment(consignment: Consignment): ReactNode {\n        const { cart } = this.props;\n\n        return (\n            <div className=\"staticConsignment\">\n                <strong>\n                    <TranslatedString id=\"shipping.shipping_address_heading\" />\n                </strong>\n\n                <StaticAddress address={consignment.shippingAddress} />\n\n                <StaticConsignmentItemList cart={cart} consignment={consignment} />\n            </div>\n        );\n    }\n}\n\nfunction getRadioInputName(consignmentId: string): string {\n    return `shippingOptionIds.${consignmentId}`;\n}\n\nexport interface ShippingOptionsFormValues {\n    shippingOptionIds: {\n        [shippingOptionIds: string]: string;\n    };\n}\n\nexport default withFormik<ShippingOptionsFormProps, ShippingOptionsFormValues>({\n    handleSubmit: noop,\n    mapPropsToValues({ consignments }) {\n        const shippingOptionIds: { [id: string]: string } = {};\n\n        (consignments || []).forEach((consignment) => {\n            shippingOptionIds[consignment.id] = consignment.selectedShippingOption\n                ? consignment.selectedShippingOption.id\n                : '';\n        });\n\n        return { shippingOptionIds };\n    },\n})(ShippingOptionsForm);\n","import { Cart, CheckoutSelectors, Consignment } from '@bigcommerce/checkout-sdk';\nimport { map, sortBy, uniq } from 'lodash';\nimport { createSelector } from 'reselect';\n\nimport { CheckoutContextProps, withCheckout } from '../../checkout';\nimport getShippableLineItems from '../getShippableLineItems';\nimport getShippingMethodId from '../getShippingMethodId';\n\nimport ShippingOptionsForm from './ShippingOptionsForm';\n\nexport interface ShippingOptionsProps {\n    isMultiShippingMode: boolean;\n    isUpdatingAddress?: boolean;\n    shouldShowShippingOptions: boolean;\n}\n\nexport interface WithCheckoutShippingOptionsProps {\n    invalidShippingMessage: string;\n    methodId?: string;\n    consignments?: Consignment[];\n    cart: Cart;\n    isSelectingShippingOption(consignmentId?: string): boolean;\n    subscribeToConsignments(subscriber: (state: CheckoutSelectors) => void): () => void;\n    selectShippingOption(consignmentId: string, optionId: string): Promise<CheckoutSelectors>;\n    isLoading(consignmentId?: string): boolean;\n}\n\nconst subscribeToConsignmentsSelector = createSelector(\n    ({ checkoutService }: CheckoutContextProps) => checkoutService.subscribe,\n    (subscribe) => (subscriber: (state: CheckoutSelectors) => void) => {\n        return subscribe(subscriber, ({ data }) => data.getConsignments());\n    },\n);\n\nconst isLoadingSelector = createSelector(\n    (_: CheckoutSelectors, { isUpdatingAddress }: ShippingOptionsProps) => isUpdatingAddress,\n    ({ statuses }: CheckoutSelectors) => statuses.isLoadingShippingOptions,\n    ({ statuses }: CheckoutSelectors) => statuses.isSelectingShippingOption,\n    ({ statuses }: CheckoutSelectors) => statuses.isUpdatingConsignment,\n    ({ statuses }: CheckoutSelectors) => statuses.isCreatingConsignments,\n    (\n        isUpdatingAddress,\n        isLoadingShippingOptions,\n        isSelectingShippingOption,\n        isUpdatingConsignment,\n        isCreatingConsignments,\n    ) => {\n        return (consignmentId?: string) => {\n            return (\n                isUpdatingAddress ||\n                isLoadingShippingOptions() ||\n                isSelectingShippingOption(consignmentId) ||\n                isUpdatingConsignment(consignmentId) ||\n                isCreatingConsignments()\n            );\n        };\n    },\n);\n\nconst sortConsignments = (cart: Cart, unsortedConsignments: Consignment[]): Consignment[] => {\n    if (unsortedConsignments.length < 2) {\n        return unsortedConsignments;\n    }\n\n    const shippableItems = getShippableLineItems(cart, unsortedConsignments);\n    const consignmentsOrder = uniq(map(shippableItems, 'consignment.id'));\n\n    return sortBy(unsortedConsignments, (consignment) => consignmentsOrder.indexOf(consignment.id));\n};\n\nexport function mapToShippingOptions(\n    { checkoutService, checkoutState }: CheckoutContextProps,\n    props: ShippingOptionsProps,\n): WithCheckoutShippingOptionsProps | null {\n    const {\n        data: { getCart, getConsignments, getConfig, getCustomer, getCheckout },\n        statuses: { isSelectingShippingOption },\n    } = checkoutState;\n\n    const customer = getCustomer();\n    const cart = getCart();\n    const config = getConfig();\n    const checkout = getCheckout();\n\n    if (!config || !checkout || !customer || !cart) {\n        return null;\n    }\n\n    const consignments = sortConsignments(cart, getConsignments() || []);\n    const methodId = getShippingMethodId(checkout);\n    const { shippingQuoteFailedMessage } = config.checkoutSettings;\n\n    return {\n        cart,\n        consignments,\n        invalidShippingMessage: shippingQuoteFailedMessage,\n        isLoading: isLoadingSelector(checkoutState, props),\n        isSelectingShippingOption,\n        methodId,\n        selectShippingOption: checkoutService.selectConsignmentShippingOption,\n        subscribeToConsignments: subscribeToConsignmentsSelector({\n            checkoutService,\n            checkoutState,\n        }),\n    };\n}\n\nexport default withCheckout(mapToShippingOptions)(ShippingOptionsForm);\n","import React, { PureComponent, ReactNode } from 'react';\n\nimport { TranslatedString } from '../locale';\nimport { OrderComments } from '../orderComments';\nimport { Alert, AlertType } from '../ui/alert';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { Fieldset, Legend } from '../ui/form';\n\nimport { ShippingOptions } from './shippingOption';\n\nexport interface ShippingFormFooterProps {\n    cartHasChanged: boolean;\n    isMultiShippingMode: boolean;\n    shouldShowOrderComments: boolean;\n    shouldShowShippingOptions?: boolean;\n    shouldDisableSubmit: boolean;\n    isLoading: boolean;\n}\n\nclass ShippingFormFooter extends PureComponent<ShippingFormFooterProps> {\n    render(): ReactNode {\n        const {\n            cartHasChanged,\n            isMultiShippingMode,\n            shouldShowOrderComments,\n            shouldShowShippingOptions = true,\n            shouldDisableSubmit,\n            isLoading,\n        } = this.props;\n\n        return (\n            <>\n                <Fieldset\n                    id=\"checkout-shipping-options\"\n                    legend={\n                        <>\n                            <Legend>\n                                <TranslatedString id=\"shipping.shipping_method_label\" />\n                            </Legend>\n\n                            {cartHasChanged && (\n                                <Alert type={AlertType.Error}>\n                                    <strong>\n                                        <TranslatedString id=\"shipping.cart_change_error\" />\n                                    </strong>\n                                </Alert>\n                            )}\n                        </>\n                    }\n                >\n                    <ShippingOptions\n                        isMultiShippingMode={isMultiShippingMode}\n                        isUpdatingAddress={isLoading}\n                        shouldShowShippingOptions={shouldShowShippingOptions}\n                    />\n                </Fieldset>\n\n                {shouldShowOrderComments && <OrderComments />}\n\n                <div className=\"form-actions\">\n                    <Button\n                        disabled={shouldDisableSubmit}\n                        id=\"checkout-shipping-continue\"\n                        isLoading={isLoading}\n                        type=\"submit\"\n                        variant={ButtonVariant.Primary}\n                    >\n                        <TranslatedString id=\"common.continue_action\" />\n                    </Button>\n                </div>\n            </>\n        );\n    }\n}\n\nexport default ShippingFormFooter;\n","import { Address, Cart, Consignment } from '@bigcommerce/checkout-sdk';\n\nimport { isEqualAddress } from '../address';\n\nimport findConsignment from './findConsignment';\nimport ShippableItem from './ShippableItem';\n\nexport interface UpdateItemParams {\n    updatedItemIndex: number;\n    address: Address;\n}\n\nexport default function updateShippableItems(\n    items: ShippableItem[],\n    { updatedItemIndex, address }: UpdateItemParams,\n    { cart, consignments }: { cart?: Cart; consignments?: Consignment[] },\n): ShippableItem[] | undefined {\n    if (updatedItemIndex < 0 || updatedItemIndex >= items.length || !cart) {\n        return;\n    }\n\n    const cartItemIds = cart.lineItems.physicalItems.map(({ id }) => id);\n\n    const updatedConsignment = (consignments || []).find((consignment) =>\n        isEqualAddress(consignment.shippingAddress, address),\n    );\n\n    const newId = findNewItemId(items[updatedItemIndex], cart, updatedConsignment);\n\n    return items.map((item, i) => {\n        if ((newId && !cartItemIds.includes(item.id)) || i === updatedItemIndex) {\n            const itemId = newId ?? item.id;\n\n            return {\n                ...item,\n                id: itemId,\n                consignment: findConsignment(consignments || [], itemId as string),\n            };\n        }\n\n        return item;\n    });\n}\n\nfunction findNewItemId(\n    item: ShippableItem,\n    cart?: Cart,\n    consignment?: Consignment,\n): string | undefined {\n    if (!cart || !consignment) {\n        return;\n    }\n\n    const { physicalItems } = cart.lineItems;\n    const matchingCartItems = physicalItems.filter(\n        ({ productId, variantId }) => productId === item.productId && variantId === item.variantId,\n    );\n\n    const matchingCartItemIds = matchingCartItems.map(({ id }) => id);\n\n    return consignment.lineItemIds.find((id) => matchingCartItemIds.includes(id));\n}\n","import {\n    Address,\n    AddressRequestBody,\n    Cart,\n    CheckoutSelectors,\n    CheckoutStoreSelector,\n    Consignment,\n    ConsignmentAssignmentRequestBody,\n    Country,\n    CustomerAddress,\n    FormField,\n} from '@bigcommerce/checkout-sdk';\nimport { FormikProps, withFormik } from 'formik';\nimport React, { PureComponent, ReactNode } from 'react';\n\nimport {\n    AddressFormModal,\n    AddressFormValues,\n    isValidAddress,\n    mapAddressFromFormValues,\n} from '../address';\nimport { preventDefault } from '../common/dom';\nimport { ErrorModal } from '../common/error';\nimport { TranslatedLink, TranslatedString, withLanguage, WithLanguageProps } from '../locale';\nimport { Form } from '../ui/form';\n\nimport { AssignItemFailedError, AssignItemInvalidAddressError } from './errors';\nimport getShippableItemsCount from './getShippableItemsCount';\nimport getShippableLineItems from './getShippableLineItems';\nimport hasSelectedShippingOptions from './hasSelectedShippingOptions';\nimport hasUnassignedLineItems from './hasUnassignedLineItems';\nimport ItemAddressSelect from './ItemAddressSelect';\nimport ShippableItem from './ShippableItem';\nimport ShippingFormFooter from './ShippingFormFooter';\nimport updateShippableItems from './updateShippableItems';\n\nexport interface MultiShippingFormProps {\n    addresses: CustomerAddress[];\n    cart: Cart;\n    cartHasChanged: boolean;\n    consignments: Consignment[];\n    customerMessage: string;\n    isGuest: boolean;\n    isLoading: boolean;\n    shouldShowOrderComments: boolean;\n    defaultCountryCode?: string;\n    countries?: Country[];\n    countriesWithAutocomplete: string[];\n    googleMapsApiKey?: string;\n    shouldShowAddAddressInCheckout: boolean;\n    useFloatingLabel?: boolean;\n    assignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n    onCreateAccount(): void;\n    createCustomerAddress(address: AddressRequestBody): void;\n    onSignIn(): void;\n    getFields(countryCode?: string): FormField[];\n    onSubmit(values: MultiShippingFormValues): void;\n    onUnhandledError(error: Error): void;\n    onUseNewAddress(address: Address, itemId: string): void;\n}\n\ninterface ShippableItemId {\n    key: string;\n    itemId: string;\n}\n\nexport interface MultiShippingFormState {\n    items: ShippableItem[];\n    itemAddingAddress?: ShippableItemId;\n    createCustomerAddressError?: Error;\n}\n\nclass MultiShippingForm extends PureComponent<\n    MultiShippingFormProps & WithLanguageProps & FormikProps<MultiShippingFormValues>,\n    MultiShippingFormState\n> {\n    static getDerivedStateFromProps(\n        { cart, consignments }: MultiShippingFormProps,\n        state: MultiShippingFormState,\n    ) {\n        if (!state || !state.items || getShippableItemsCount(cart) !== state.items.length) {\n            return { items: getShippableLineItems(cart, consignments) };\n        }\n\n        return null;\n    }\n\n    state: MultiShippingFormState = { items: [] };\n\n    render(): ReactNode {\n        const {\n            addresses,\n            consignments,\n            cart,\n            isGuest,\n            onSignIn,\n            onCreateAccount,\n            cartHasChanged,\n            shouldShowOrderComments,\n            isLoading,\n            getFields,\n            defaultCountryCode,\n            countries,\n            countriesWithAutocomplete,\n            googleMapsApiKey,\n            useFloatingLabel,\n        } = this.props;\n\n        const { items, itemAddingAddress, createCustomerAddressError } = this.state;\n\n        if (isGuest) {\n            return (\n                <div className=\"checkout-step-info\">\n                    <TranslatedString id=\"shipping.multishipping_guest_intro\" />{' '}\n                    <a\n                        data-test=\"shipping-sign-in-link\"\n                        href=\"#\"\n                        onClick={preventDefault(onSignIn)}\n                    >\n                        <TranslatedString id=\"shipping.multishipping_guest_sign_in\" />\n                    </a>{' '}\n                    <TranslatedLink\n                        id=\"shipping.multishipping_guest_create\"\n                        onClick={onCreateAccount}\n                    />\n                </div>\n            );\n        }\n\n        return (\n            <>\n                <ErrorModal\n                    error={createCustomerAddressError}\n                    message={\n                        <>\n                            <TranslatedString id=\"address.consignment_address_updated_text\" />{' '}\n                            <TranslatedString id=\"customer.create_address_error\" />\n                        </>\n                    }\n                    onClose={this.handleCloseErrorModal}\n                    shouldShowErrorCode={false}\n                />\n                <AddressFormModal\n                    countries={countries}\n                    countriesWithAutocomplete={countriesWithAutocomplete}\n                    defaultCountryCode={defaultCountryCode}\n                    getFields={getFields}\n                    googleMapsApiKey={googleMapsApiKey}\n                    isLoading={isLoading}\n                    isOpen={!!itemAddingAddress}\n                    onRequestClose={this.handleCloseAddAddressForm}\n                    onSaveAddress={this.handleSaveAddress}\n                    useFloatingLabel={useFloatingLabel}\n                />\n\n                <Form>\n                    <ul className=\"consignmentList\">\n                        {items.map((item) => (\n                            <li key={item.key}>\n                                <ItemAddressSelect\n                                    addresses={addresses}\n                                    item={item}\n                                    onSelectAddress={this.handleSelectAddress}\n                                    onUseNewAddress={this.handleUseNewAddress}\n                                />\n                            </li>\n                        ))}\n                    </ul>\n\n                    <ShippingFormFooter\n                        cartHasChanged={cartHasChanged}\n                        isLoading={isLoading}\n                        isMultiShippingMode={true}\n                        shouldDisableSubmit={this.shouldDisableSubmit()}\n                        shouldShowOrderComments={shouldShowOrderComments}\n                        shouldShowShippingOptions={\n                            !hasUnassignedLineItems(consignments, cart.lineItems)\n                        }\n                    />\n                </Form>\n            </>\n        );\n    }\n\n    private handleCloseErrorModal: () => void = () => {\n        this.setState({ createCustomerAddressError: undefined });\n    };\n\n    private handleSaveAddress: (address: AddressFormValues) => void = async (address) => {\n        const { createCustomerAddress } = this.props;\n        const { itemAddingAddress } = this.state;\n\n        if (!itemAddingAddress) {\n            return;\n        }\n\n        const shippingAddress = mapAddressFromFormValues(address);\n\n        await this.handleSelectAddress(\n            shippingAddress,\n            itemAddingAddress.itemId,\n            itemAddingAddress.key,\n        );\n\n        try {\n            await createCustomerAddress(shippingAddress);\n        } catch (error) {\n            if (error instanceof Error) {\n                this.setState({ createCustomerAddressError: error });\n            }\n        }\n\n        this.setState({\n            itemAddingAddress: undefined,\n        });\n    };\n\n    private handleUseNewAddress: (address: Address, itemId: string, itemKey: string) => void = (\n        address,\n        itemId,\n        itemKey,\n    ) => {\n        const { onUseNewAddress, shouldShowAddAddressInCheckout } = this.props;\n\n        if (!shouldShowAddAddressInCheckout) {\n            onUseNewAddress(address, itemId);\n\n            return;\n        }\n\n        this.setState({\n            itemAddingAddress: {\n                key: itemKey,\n                itemId,\n            },\n        });\n    };\n\n    private handleCloseAddAddressForm: () => void = () => {\n        this.setState({\n            itemAddingAddress: undefined,\n        });\n    };\n\n    private handleSelectAddress: (\n        address: Address,\n        itemId: string,\n        itemKey: string,\n    ) => Promise<void> = async (address, itemId, itemKey) => {\n        const { assignItem, onUnhandledError, getFields } = this.props;\n\n        if (!isValidAddress(address, getFields(address.countryCode))) {\n            return onUnhandledError(new AssignItemInvalidAddressError());\n        }\n\n        try {\n            const { data } = await assignItem({\n                address,\n                lineItems: [\n                    {\n                        itemId,\n                        quantity: 1,\n                    },\n                ],\n            });\n\n            this.syncItems(itemKey, address, data);\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(new AssignItemFailedError(error));\n            }\n        }\n    };\n\n    private shouldDisableSubmit: () => boolean = () => {\n        const { isLoading, consignments } = this.props;\n\n        return isLoading || !hasSelectedShippingOptions(consignments);\n    };\n\n    private syncItems: (key: string, address: Address, data: CheckoutStoreSelector) => void = (\n        key,\n        address,\n        data,\n    ) => {\n        const { items: currentItems } = this.state;\n        const items = updateShippableItems(\n            currentItems,\n            {\n                updatedItemIndex: currentItems.findIndex((item) => item.key === key),\n                address,\n            },\n            {\n                cart: data.getCart(),\n                consignments: data.getConsignments(),\n            },\n        );\n\n        if (items) {\n            this.setState({ items });\n        }\n    };\n}\n\nexport interface MultiShippingFormValues {\n    orderComment: string;\n}\n\nexport default withLanguage(\n    withFormik<MultiShippingFormProps & WithLanguageProps, MultiShippingFormValues>({\n        handleSubmit: (values, { props: { onSubmit } }) => {\n            onSubmit(values);\n        },\n        mapPropsToValues: ({ customerMessage }) => ({\n            orderComment: customerMessage,\n        }),\n        enableReinitialize: true,\n    })(MultiShippingForm),\n);\n","import React, { FunctionComponent, memo, useMemo } from 'react';\n\nimport { TranslatedString } from '../locale';\nimport { CheckboxFormField } from '../ui/form';\n\nexport interface BillingSameAsShippingFieldProps {\n    onChange?(isChecked: boolean): void;\n}\n\nconst BillingSameAsShippingField: FunctionComponent<BillingSameAsShippingFieldProps> = ({\n    onChange,\n}) => {\n    const labelContent = useMemo(\n        () => <TranslatedString id=\"billing.use_shipping_address_label\" />,\n        [],\n    );\n\n    return (\n        <CheckboxFormField\n            id=\"sameAsBilling\"\n            labelContent={labelContent}\n            name=\"billingSameAsShipping\"\n            onChange={onChange}\n        />\n    );\n};\n\nexport default memo(BillingSameAsShippingField);\n","import {\n    CheckoutSelectors,\n    FormField,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\n\nimport { DynamicFormField, Fieldset } from '../ui/form';\n\nexport interface RemoteShippingAddressProps {\n    containerId: string;\n    methodId: string;\n    formFields: FormField[];\n    useFloatingLabel?: boolean;\n    deinitialize(options?: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options?: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onUnhandledError?(error: Error): void;\n    onFieldChange(fieldName: string, value: string): void;\n}\n\nclass RemoteShippingAddress extends PureComponent<RemoteShippingAddressProps> {\n    async componentDidMount(): Promise<void> {\n        const { initialize, methodId, onUnhandledError = noop } = this.props;\n\n        try {\n            await initialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const { deinitialize, methodId, onUnhandledError = noop } = this.props;\n\n        try {\n            await deinitialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    render(): ReactNode {\n        const { containerId, formFields, methodId, useFloatingLabel } = this.props;\n\n        return (\n            <>\n                <div\n                    className={`widget address-widget widget--${methodId}`}\n                    id={containerId}\n                    tabIndex={-1}\n                />\n                <Fieldset>\n                    {formFields\n                        .filter(({ custom }) => custom)\n                        .map((field) => (\n                            <DynamicFormField\n                                field={field}\n                                key={`${field.id}-${field.name}`}\n                                onChange={this.handleFieldValueChange(field.name)}\n                                parentFieldName=\"shippingAddress.customFields\"\n                                useFloatingLabel={useFloatingLabel}\n                            />\n                        ))}\n                </Fieldset>\n            </>\n        );\n    }\n\n    private handleFieldValueChange: (name: string) => (value: string) => void =\n        (name) => (value) => {\n            const { onFieldChange } = this.props;\n\n            onFieldChange(name, value);\n        };\n}\n\nexport default RemoteShippingAddress;\n","import {\n    Address,\n    Consignment,\n    Country,\n    CustomerAddress,\n    FormField,\n} from '@bigcommerce/checkout-sdk';\nimport React, { Component, ReactNode } from 'react';\n\nimport { AddressForm, AddressSelect, isValidCustomerAddress } from '../address';\nimport { connectFormik, ConnectFormikProps } from '../common/form';\nimport { Fieldset } from '../ui/form';\nimport { LoadingOverlay } from '../ui/loading';\n\nimport { SingleShippingFormValues } from './SingleShippingForm';\n\nexport interface ShippingAddressFormProps {\n    addresses: CustomerAddress[];\n    address?: Address;\n    consignments: Consignment[];\n    countries?: Country[];\n    countriesWithAutocomplete: string[];\n    googleMapsApiKey?: string;\n    isLoading: boolean;\n    formFields: FormField[];\n    shouldShowSaveAddress?: boolean;\n    useFloatingLabel?: boolean;\n    onUseNewAddress(): void;\n    onFieldChange(fieldName: string, value: string): void;\n    onAddressSelect(address: Address): void;\n}\n\nconst addressFieldName = 'shippingAddress';\n\nclass ShippingAddressForm extends Component<\n    ShippingAddressFormProps & ConnectFormikProps<SingleShippingFormValues>\n> {\n    render(): ReactNode {\n        const {\n            addresses,\n            address: shippingAddress,\n            onAddressSelect,\n            onUseNewAddress,\n            shouldShowSaveAddress,\n            countries,\n            countriesWithAutocomplete,\n            formFields,\n            isLoading,\n            googleMapsApiKey,\n            useFloatingLabel,\n            formik: {\n                values: { shippingAddress: formAddress },\n            },\n        } = this.props;\n\n        const hasAddresses = addresses && addresses.length > 0;\n        const hasValidCustomerAddress = isValidCustomerAddress(\n            shippingAddress,\n            addresses,\n            formFields,\n        );\n\n        return (\n            <Fieldset id=\"checkoutShippingAddress\">\n                {hasAddresses && (\n                    <Fieldset id=\"shippingAddresses\">\n                        <LoadingOverlay isLoading={isLoading}>\n                            <AddressSelect\n                                addresses={addresses}\n                                onSelectAddress={onAddressSelect}\n                                onUseNewAddress={onUseNewAddress}\n                                selectedAddress={\n                                    hasValidCustomerAddress ? shippingAddress : undefined\n                                }\n                            />\n                        </LoadingOverlay>\n                    </Fieldset>\n                )}\n\n                {!hasValidCustomerAddress && (\n                    <LoadingOverlay isLoading={isLoading} unmountContentWhenLoading>\n                        <AddressForm\n                            countries={countries}\n                            countriesWithAutocomplete={countriesWithAutocomplete}\n                            countryCode={formAddress && formAddress.countryCode}\n                            fieldName={addressFieldName}\n                            formFields={formFields}\n                            googleMapsApiKey={googleMapsApiKey}\n                            onAutocompleteToggle={this.handleAutocompleteToggle}\n                            onChange={this.handleChange}\n                            setFieldValue={this.setFieldValue}\n                            shouldShowSaveAddress={shouldShowSaveAddress}\n                            useFloatingLabel={useFloatingLabel}\n                        />\n                    </LoadingOverlay>\n                )}\n            </Fieldset>\n        );\n    }\n\n    private setFieldValue: (fieldName: string, fieldValue: string) => void = (\n        fieldName,\n        fieldValue,\n    ) => {\n        const {\n            formik: { setFieldValue },\n            formFields,\n        } = this.props;\n\n        const customFormFieldNames = formFields\n            .filter((field) => field.custom)\n            .map((field) => field.name);\n\n        const formFieldName = customFormFieldNames.includes(fieldName)\n            ? `customFields.${fieldName}`\n            : fieldName;\n\n        setFieldValue(`${addressFieldName}.${formFieldName}`, fieldValue);\n    };\n\n    private handleChange: (fieldName: string, value: string) => void = (fieldName, value) => {\n        const { onFieldChange } = this.props;\n\n        onFieldChange(fieldName, value);\n    };\n\n    private handleAutocompleteToggle: (state: { inputValue: string; isOpen: boolean }) => void = ({\n        isOpen,\n        inputValue,\n    }) => {\n        const { onFieldChange } = this.props;\n\n        if (!isOpen) {\n            onFieldChange('address1', inputValue);\n        }\n    };\n}\n\nexport default connectFormik(ShippingAddressForm);\n","import {\n    Address,\n    CheckoutSelectors,\n    FormField,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\n\nimport { StaticAddress } from '../address/';\nimport { preventDefault } from '../common/dom';\nimport { TranslatedString } from '../locale';\nimport { Button, ButtonSize, ButtonVariant } from '../ui/button';\nimport { DynamicFormField, Fieldset } from '../ui/form';\nimport { LoadingOverlay } from '../ui/loading';\n\nimport './StaticAddressEditable.scss';\n\nexport interface StaticAddressEditableProps {\n    address: Address;\n    buttonId: string;\n    formFields: FormField[];\n    isLoading: boolean;\n    methodId?: string;\n    deinitialize(options?: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options?: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onFieldChange(fieldName: string, value: string): void;\n    onUnhandledError?(error: Error): void;\n}\n\nclass StaticAddressEditable extends PureComponent<StaticAddressEditableProps> {\n    async componentDidMount(): Promise<void> {\n        const { initialize, methodId, onUnhandledError = noop } = this.props;\n\n        try {\n            await initialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const { deinitialize, methodId, onUnhandledError = noop } = this.props;\n\n        try {\n            await deinitialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    render(): ReactNode {\n        const { address, buttonId, formFields, isLoading } = this.props;\n\n        const customFormFields = formFields.filter(({ custom }) => custom);\n        const shouldShowCustomFormFields = customFormFields.length > 0;\n\n        return (\n            <LoadingOverlay isLoading={isLoading}>\n                <div className=\"stepHeader\" style={{ padding: 0 }}>\n                    <div className=\"stepHeader-body subheader\">\n                        <StaticAddress address={address} />\n                    </div>\n\n                    <div className=\"stepHeader-actions subheader\">\n                        <Button\n                            id={buttonId}\n                            onClick={preventDefault()}\n                            size={ButtonSize.Tiny}\n                            testId=\"step-edit-button\"\n                            variant={ButtonVariant.Secondary}\n                        >\n                            <TranslatedString id=\"common.edit_action\" />\n                        </Button>\n                    </div>\n                </div>\n\n                {shouldShowCustomFormFields && (\n                    <Fieldset id=\"customFieldset\">\n                        {customFormFields.map((field) => (\n                            <DynamicFormField\n                                field={field}\n                                key={`${field.id}-${field.name}`}\n                                onChange={this.handleFieldValueChange(field.name)}\n                                parentFieldName=\"shippingAddress.customFields\"\n                            />\n                        ))}\n                    </Fieldset>\n                )}\n            </LoadingOverlay>\n        );\n    }\n\n    private handleFieldValueChange: (name: string) => (value: string) => void =\n        (name) => (value) => {\n            const { onFieldChange } = this.props;\n\n            onFieldChange(name, value);\n        };\n}\n\nexport default StaticAddressEditable;\n","import {\n    Address,\n    CheckoutSelectors,\n    Consignment,\n    Country,\n    CustomerAddress,\n    FormField,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport { noop } from 'lodash';\nimport React, { FunctionComponent, memo, useCallback, useContext } from 'react';\n\nimport { FormContext } from '../ui/form';\n\nimport RemoteShippingAddress from './RemoteShippingAddress';\nimport ShippingAddressForm from './ShippingAddressForm';\nimport StaticAddressEditable from './StaticAddressEditable';\n\nexport interface ShippingAddressProps {\n    addresses: CustomerAddress[];\n    consignments: Consignment[];\n    countries?: Country[];\n    countriesWithAutocomplete: string[];\n    formFields: FormField[];\n    googleMapsApiKey?: string;\n    isLoading: boolean;\n    isShippingStepPending: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowSaveAddress?: boolean;\n    hasRequestedShippingOptions: boolean;\n    useFloatingLabel?: boolean;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onAddressSelect(address: Address): void;\n    onFieldChange(name: string, value: string): void;\n    onUnhandledError?(error: Error): void;\n    onUseNewAddress(): void;\n}\n\nconst ShippingAddress: FunctionComponent<ShippingAddressProps> = (props) => {\n    const {\n        methodId,\n        formFields,\n        countries,\n        countriesWithAutocomplete,\n        consignments,\n        googleMapsApiKey,\n        onAddressSelect,\n        onFieldChange,\n        onUseNewAddress,\n        initialize,\n        deinitialize,\n        isLoading,\n        shippingAddress,\n        hasRequestedShippingOptions,\n        addresses,\n        shouldShowSaveAddress,\n        onUnhandledError = noop,\n        isShippingStepPending,\n        useFloatingLabel,\n    } = props;\n\n    const { setSubmitted } = useContext(FormContext);\n\n    const initializeShipping = useCallback(\n        memoizeOne(\n            (defaultOptions: ShippingInitializeOptions) => (options?: ShippingInitializeOptions) =>\n                initialize({\n                    ...defaultOptions,\n                    ...options,\n                }),\n        ),\n        [],\n    );\n\n    const handleFieldChange: (fieldName: string, value: string) => void = (fieldName, value) => {\n        if (hasRequestedShippingOptions) {\n            setSubmitted(true);\n        }\n\n        onFieldChange(fieldName, value);\n    };\n\n    if (methodId) {\n        const containerId = 'addressWidget';\n        let options: ShippingInitializeOptions = {};\n\n        if (methodId === 'amazon') {\n            options = {\n                amazon: {\n                    container: containerId,\n                    onError: onUnhandledError,\n                },\n            };\n\n            return (\n                <RemoteShippingAddress\n                    containerId={containerId}\n                    deinitialize={deinitialize}\n                    formFields={formFields}\n                    initialize={initializeShipping(options)}\n                    methodId={methodId}\n                    onFieldChange={onFieldChange}\n                    useFloatingLabel={useFloatingLabel}\n                />\n            );\n        }\n\n        if (methodId === 'amazonpay' && shippingAddress) {\n            const editAddressButtonId = 'edit-ship-button';\n\n            options = {\n                amazonpay: {\n                    editAddressButtonId,\n                },\n            };\n\n            return (\n                <StaticAddressEditable\n                    address={shippingAddress}\n                    buttonId={editAddressButtonId}\n                    deinitialize={deinitialize}\n                    formFields={formFields}\n                    initialize={initializeShipping(options)}\n                    isLoading={isShippingStepPending}\n                    methodId={methodId}\n                    onFieldChange={onFieldChange}\n                />\n            );\n        }\n    }\n\n    return (\n        <ShippingAddressForm\n            address={shippingAddress}\n            addresses={addresses}\n            consignments={consignments}\n            countries={countries}\n            countriesWithAutocomplete={countriesWithAutocomplete}\n            formFields={formFields}\n            googleMapsApiKey={googleMapsApiKey}\n            isLoading={isLoading}\n            onAddressSelect={onAddressSelect}\n            onFieldChange={handleFieldChange}\n            onUseNewAddress={onUseNewAddress}\n            shouldShowSaveAddress={shouldShowSaveAddress}\n            useFloatingLabel={useFloatingLabel}\n        />\n    );\n};\n\nexport default memo(ShippingAddress);\n","export const SHIPPING_ADDRESS_FIELDS = [\n    'address1',\n    'postalCode',\n    'countryCode',\n    'city',\n    'stateOrProvince',\n    'stateOrProvinceCode',\n];\n","import {\n    Address,\n    CheckoutParams,\n    CheckoutSelectors,\n    Consignment,\n    Country,\n    CustomerAddress,\n    CustomerRequestOptions,\n    FormField,\n    RequestOptions,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { FormikProps, withFormik } from 'formik';\nimport { debounce, noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\nimport { lazy, object } from 'yup';\n\nimport {\n    AddressFormValues,\n    getAddressFormFieldsValidationSchema,\n    getTranslateAddressError,\n    isEqualAddress,\n    mapAddressFromFormValues,\n    mapAddressToFormValues,\n} from '../address';\nimport { getCustomFormFieldsValidationSchema } from '../formFields';\nimport { withLanguage, WithLanguageProps } from '../locale';\nimport { Fieldset, Form, FormContext } from '../ui/form';\n\nimport BillingSameAsShippingField from './BillingSameAsShippingField';\nimport hasSelectedShippingOptions from './hasSelectedShippingOptions';\nimport ShippingAddress from './ShippingAddress';\nimport { SHIPPING_ADDRESS_FIELDS } from './ShippingAddressFields';\nimport ShippingFormFooter from './ShippingFormFooter';\n\nexport interface SingleShippingFormProps {\n    addresses: CustomerAddress[];\n    isBillingSameAsShipping: boolean;\n    cartHasChanged: boolean;\n    consignments: Consignment[];\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    customerMessage: string;\n    googleMapsApiKey?: string;\n    isLoading: boolean;\n    isShippingStepPending: boolean;\n    isMultiShippingMode: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowSaveAddress?: boolean;\n    shouldShowOrderComments: boolean;\n    useFloatingLabel?: boolean;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    deleteConsignments(): Promise<Address | undefined>;\n    getFields(countryCode?: string): FormField[];\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onSubmit(values: SingleShippingFormValues): void;\n    onUnhandledError?(error: Error): void;\n    signOut(options?: CustomerRequestOptions): void;\n    updateAddress(\n        address: Partial<Address>,\n        options?: RequestOptions<CheckoutParams>,\n    ): Promise<CheckoutSelectors>;\n}\n\nexport interface SingleShippingFormValues {\n    billingSameAsShipping: boolean;\n    shippingAddress?: AddressFormValues;\n    orderComment: string;\n}\n\ninterface SingleShippingFormState {\n    isResettingAddress: boolean;\n    isUpdatingShippingData: boolean;\n    hasRequestedShippingOptions: boolean;\n}\n\nexport const SHIPPING_AUTOSAVE_DELAY = 1700;\n\nclass SingleShippingForm extends PureComponent<\n    SingleShippingFormProps & WithLanguageProps & FormikProps<SingleShippingFormValues>\n> {\n    static contextType = FormContext;\n\n    state: SingleShippingFormState = {\n        isResettingAddress: false,\n        isUpdatingShippingData: false,\n        hasRequestedShippingOptions: false,\n    };\n\n    private debouncedUpdateAddress: any;\n\n    constructor(\n        props: SingleShippingFormProps & WithLanguageProps & FormikProps<SingleShippingFormValues>,\n    ) {\n        super(props);\n\n        const { updateAddress } = this.props;\n\n        this.debouncedUpdateAddress = debounce(\n            async (address: Address, includeShippingOptions: boolean) => {\n                try {\n                    await updateAddress(address, {\n                        params: {\n                            include: {\n                                'consignments.availableShippingOptions': includeShippingOptions,\n                            },\n                        },\n                    });\n\n                    if (includeShippingOptions) {\n                        this.setState({ hasRequestedShippingOptions: true });\n                    }\n                } finally {\n                    this.setState({ isUpdatingShippingData: false });\n                }\n            },\n            SHIPPING_AUTOSAVE_DELAY,\n        );\n    }\n\n    render(): ReactNode {\n        const {\n            addresses,\n            cartHasChanged,\n            isLoading,\n            onUnhandledError,\n            methodId,\n            shouldShowSaveAddress,\n            countries,\n            countriesWithAutocomplete,\n            googleMapsApiKey,\n            shippingAddress,\n            consignments,\n            shouldShowOrderComments,\n            initialize,\n            isValid,\n            deinitialize,\n            values: { shippingAddress: addressForm },\n            isShippingStepPending,\n            useFloatingLabel,\n        } = this.props;\n\n        const { isResettingAddress, isUpdatingShippingData, hasRequestedShippingOptions } =\n            this.state;\n\n        const PAYMENT_METHOD_VALID = ['amazon', 'amazonpay'];\n        const shouldShowBillingSameAsShipping = !PAYMENT_METHOD_VALID.some(\n            (method) => method === methodId,\n        );\n\n        return (\n            <Form autoComplete=\"on\">\n                <Fieldset>\n                    <ShippingAddress\n                        addresses={addresses}\n                        consignments={consignments}\n                        countries={countries}\n                        countriesWithAutocomplete={countriesWithAutocomplete}\n                        deinitialize={deinitialize}\n                        formFields={this.getFields(addressForm && addressForm.countryCode)}\n                        googleMapsApiKey={googleMapsApiKey}\n                        hasRequestedShippingOptions={hasRequestedShippingOptions}\n                        initialize={initialize}\n                        isLoading={isResettingAddress}\n                        isShippingStepPending={isShippingStepPending}\n                        methodId={methodId}\n                        onAddressSelect={this.handleAddressSelect}\n                        onFieldChange={this.handleFieldChange}\n                        onUnhandledError={onUnhandledError}\n                        onUseNewAddress={this.onUseNewAddress}\n                        shippingAddress={shippingAddress}\n                        shouldShowSaveAddress={shouldShowSaveAddress}\n                        useFloatingLabel={useFloatingLabel}\n                    />\n                    {shouldShowBillingSameAsShipping && (\n                        <div className=\"form-body\">\n                            <BillingSameAsShippingField />\n                        </div>\n                    )}\n                </Fieldset>\n\n                <ShippingFormFooter\n                    cartHasChanged={cartHasChanged}\n                    isLoading={isLoading || isUpdatingShippingData}\n                    isMultiShippingMode={false}\n                    shouldDisableSubmit={this.shouldDisableSubmit()}\n                    shouldShowOrderComments={shouldShowOrderComments}\n                    shouldShowShippingOptions={isValid}\n                />\n            </Form>\n        );\n    }\n\n    private shouldDisableSubmit: () => boolean = () => {\n        const { isLoading, consignments, isValid } = this.props;\n\n        const { isUpdatingShippingData } = this.state;\n\n        if (!isValid) {\n            return false;\n        }\n\n        return isLoading || isUpdatingShippingData || !hasSelectedShippingOptions(consignments);\n    };\n\n    private handleFieldChange: (name: string) => void = async (name) => {\n        const { setFieldValue } = this.props;\n\n        if (name === 'countryCode') {\n            setFieldValue('shippingAddress.stateOrProvince', '');\n            setFieldValue('shippingAddress.stateOrProvinceCode', '');\n        }\n\n        // Enqueue the following code to run after Formik has run validation\n        await new Promise((resolve) => setTimeout(resolve));\n\n        const isShippingField = SHIPPING_ADDRESS_FIELDS.includes(name);\n\n        const { hasRequestedShippingOptions } = this.state;\n\n        const { isValid } = this.props;\n\n        if (!isValid) {\n            return;\n        }\n\n        this.updateAddressWithFormData(isShippingField || !hasRequestedShippingOptions);\n    };\n\n    private updateAddressWithFormData(includeShippingOptions: boolean) {\n        const {\n            shippingAddress,\n            values: { shippingAddress: addressForm },\n        } = this.props;\n\n        const updatedShippingAddress = addressForm && mapAddressFromFormValues(addressForm);\n\n        if (!updatedShippingAddress || isEqualAddress(updatedShippingAddress, shippingAddress)) {\n            return;\n        }\n\n        this.setState({ isUpdatingShippingData: true });\n        this.debouncedUpdateAddress(updatedShippingAddress, includeShippingOptions);\n    }\n\n    private handleAddressSelect: (address: Address) => void = async (address) => {\n        const { updateAddress, onUnhandledError = noop, values, setValues } = this.props;\n\n        this.setState({ isResettingAddress: true });\n\n        try {\n            await updateAddress(address);\n\n            setValues({\n                ...values,\n                shippingAddress: mapAddressToFormValues(\n                    this.getFields(address.countryCode),\n                    address,\n                ),\n            });\n        } catch (error) {\n            onUnhandledError(error);\n        } finally {\n            this.setState({ isResettingAddress: false });\n        }\n    };\n\n    private onUseNewAddress: () => void = async () => {\n        const { deleteConsignments, onUnhandledError = noop, setValues, values } = this.props;\n\n        this.setState({ isResettingAddress: true });\n\n        try {\n            const address = await deleteConsignments();\n\n            setValues({\n                ...values,\n                shippingAddress: mapAddressToFormValues(\n                    this.getFields(address && address.countryCode),\n                    address,\n                ),\n            });\n        } catch (e) {\n            onUnhandledError(e);\n        } finally {\n            this.setState({ isResettingAddress: false });\n        }\n    };\n\n    private getFields(countryCode: string | undefined): FormField[] {\n        const { getFields } = this.props;\n\n        return getFields(countryCode);\n    }\n}\n\nexport default withLanguage(\n    withFormik<SingleShippingFormProps & WithLanguageProps, SingleShippingFormValues>({\n        handleSubmit: (values, { props: { onSubmit } }) => {\n            onSubmit(values);\n        },\n        mapPropsToValues: ({\n            getFields,\n            shippingAddress,\n            isBillingSameAsShipping,\n            customerMessage,\n        }) => ({\n            billingSameAsShipping: isBillingSameAsShipping,\n            orderComment: customerMessage,\n            shippingAddress: mapAddressToFormValues(\n                getFields(shippingAddress && shippingAddress.countryCode),\n                shippingAddress,\n            ),\n        }),\n        isInitialValid: ({ shippingAddress, getFields, language }) =>\n            !!shippingAddress &&\n            getAddressFormFieldsValidationSchema({\n                language,\n                formFields: getFields(shippingAddress.countryCode),\n            }).isValidSync(shippingAddress),\n        validationSchema: ({\n            language,\n            getFields,\n            methodId,\n        }: SingleShippingFormProps & WithLanguageProps) =>\n            methodId\n                ? object({\n                      shippingAddress: lazy<Partial<AddressFormValues>>((formValues) =>\n                          getCustomFormFieldsValidationSchema({\n                              translate: getTranslateAddressError(language),\n                              formFields: getFields(formValues && formValues.countryCode),\n                          }),\n                      ),\n                  })\n                : object({\n                      shippingAddress: lazy<Partial<AddressFormValues>>((formValues) =>\n                          getAddressFormFieldsValidationSchema({\n                              language,\n                              formFields: getFields(formValues && formValues.countryCode),\n                          }),\n                      ),\n                  }),\n        enableReinitialize: false,\n    })(SingleShippingForm),\n);\n","import {\n    Address,\n    AddressRequestBody,\n    Cart,\n    CheckoutParams,\n    CheckoutSelectors,\n    Consignment,\n    ConsignmentAssignmentRequestBody,\n    Country,\n    CustomerAddress,\n    CustomerRequestOptions,\n    FormField,\n    RequestOptions,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport React, { Component, ReactNode } from 'react';\n\nimport { withLanguage, WithLanguageProps } from '../locale';\n\nimport MultiShippingForm, { MultiShippingFormValues } from './MultiShippingForm';\nimport SingleShippingForm, { SingleShippingFormValues } from './SingleShippingForm';\n\nexport interface ShippingFormProps {\n    addresses: CustomerAddress[];\n    cart: Cart;\n    cartHasChanged: boolean;\n    consignments: Consignment[];\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    customerMessage: string;\n    googleMapsApiKey?: string;\n    isBillingSameAsShipping: boolean;\n    isGuest: boolean;\n    isLoading: boolean;\n    isShippingStepPending: boolean;\n    isMultiShippingMode: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowSaveAddress?: boolean;\n    shouldShowOrderComments: boolean;\n    shouldShowAddAddressInCheckout: boolean;\n    useFloatingLabel?: boolean;\n    assignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    deleteConsignments(): Promise<Address | undefined>;\n    getFields(countryCode?: string): FormField[];\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onCreateAccount(): void;\n    createCustomerAddress(address: AddressRequestBody): Promise<CheckoutSelectors>;\n    onMultiShippingSubmit(values: MultiShippingFormValues): void;\n    onSignIn(): void;\n    onSingleShippingSubmit(values: SingleShippingFormValues): void;\n    onUnhandledError(error: Error): void;\n    onUseNewAddress(address: Address, itemId: string): void;\n    signOut(options?: CustomerRequestOptions): void;\n    updateAddress(\n        address: Partial<Address>,\n        options: RequestOptions<CheckoutParams>,\n    ): Promise<CheckoutSelectors>;\n}\n\nclass ShippingForm extends Component<ShippingFormProps & WithLanguageProps> {\n    render(): ReactNode {\n        const {\n            addresses,\n            assignItem,\n            cart,\n            cartHasChanged,\n            createCustomerAddress,\n            consignments,\n            countries,\n            countriesWithAutocomplete,\n            onCreateAccount,\n            customerMessage,\n            deinitialize,\n            deleteConsignments,\n            getFields,\n            googleMapsApiKey,\n            initialize,\n            isBillingSameAsShipping,\n            isGuest,\n            isLoading,\n            isMultiShippingMode,\n            methodId,\n            onMultiShippingSubmit,\n            onSignIn,\n            onSingleShippingSubmit,\n            onUnhandledError,\n            onUseNewAddress,\n            shippingAddress,\n            shouldShowOrderComments,\n            shouldShowSaveAddress,\n            shouldShowAddAddressInCheckout,\n            signOut,\n            updateAddress,\n            isShippingStepPending,\n            useFloatingLabel,\n        } = this.props;\n\n        return isMultiShippingMode ? (\n            <MultiShippingForm\n                addresses={addresses}\n                assignItem={assignItem}\n                cart={cart}\n                cartHasChanged={cartHasChanged}\n                consignments={consignments}\n                countries={countries}\n                countriesWithAutocomplete={countriesWithAutocomplete}\n                createCustomerAddress={createCustomerAddress}\n                customerMessage={customerMessage}\n                defaultCountryCode={shippingAddress?.countryCode}\n                getFields={getFields}\n                googleMapsApiKey={googleMapsApiKey}\n                isGuest={isGuest}\n                isLoading={isLoading}\n                onCreateAccount={onCreateAccount}\n                onSignIn={onSignIn}\n                onSubmit={onMultiShippingSubmit}\n                onUnhandledError={onUnhandledError}\n                onUseNewAddress={onUseNewAddress}\n                shouldShowAddAddressInCheckout={shouldShowAddAddressInCheckout}\n                shouldShowOrderComments={shouldShowOrderComments}\n                useFloatingLabel={useFloatingLabel}\n            />\n        ) : (\n            <SingleShippingForm\n                addresses={addresses}\n                cartHasChanged={cartHasChanged}\n                consignments={consignments}\n                countries={countries}\n                countriesWithAutocomplete={countriesWithAutocomplete}\n                customerMessage={customerMessage}\n                deinitialize={deinitialize}\n                deleteConsignments={deleteConsignments}\n                getFields={getFields}\n                googleMapsApiKey={googleMapsApiKey}\n                initialize={initialize}\n                isBillingSameAsShipping={isBillingSameAsShipping}\n                isLoading={isLoading}\n                isMultiShippingMode={isMultiShippingMode}\n                isShippingStepPending={isShippingStepPending}\n                methodId={methodId}\n                onSubmit={onSingleShippingSubmit}\n                onUnhandledError={onUnhandledError}\n                shippingAddress={shippingAddress}\n                shouldShowOrderComments={shouldShowOrderComments}\n                shouldShowSaveAddress={shouldShowSaveAddress}\n                signOut={signOut}\n                updateAddress={updateAddress}\n                useFloatingLabel={useFloatingLabel}\n            />\n        );\n    }\n}\n\nexport default withLanguage(ShippingForm);\n","import React, { FunctionComponent, memo } from 'react';\n\nimport { preventDefault } from '../common/dom';\nimport { TranslatedString } from '../locale';\nimport { Legend } from '../ui/form';\n\ninterface ShippingHeaderProps {\n    isMultiShippingMode: boolean;\n    isGuest: boolean;\n    shouldShowMultiShipping: boolean;\n    onMultiShippingChange(): void;\n}\n\nconst ShippingHeader: FunctionComponent<ShippingHeaderProps> = ({\n    isMultiShippingMode,\n    isGuest,\n    onMultiShippingChange,\n    shouldShowMultiShipping,\n}) => (\n    <div className=\"form-legend-container\">\n        <Legend testId=\"shipping-address-heading\">\n            <TranslatedString\n                id={\n                    isMultiShippingMode\n                        ? isGuest\n                            ? 'shipping.multishipping_address_heading_guest'\n                            : 'shipping.multishipping_address_heading'\n                        : 'shipping.shipping_address_heading'\n                }\n            />\n        </Legend>\n\n        {shouldShowMultiShipping && (\n            <a\n                data-test=\"shipping-mode-toggle\"\n                href=\"#\"\n                onClick={preventDefault(onMultiShippingChange)}\n            >\n                <TranslatedString\n                    id={isMultiShippingMode ? 'shipping.ship_to_single' : 'shipping.ship_to_multi'}\n                />\n            </a>\n        )}\n    </div>\n);\n\nexport default memo(ShippingHeader);\n","import { CheckoutSelectors, ShippingInitializeOptions, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\n\nexport interface StripeupeShippingAddressProps {\n    methodId?: string;\n    deinitialize(options?: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options?: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onUnhandledError?(error: Error): void;\n}\n\nclass StripeShippingAddressDisplay extends PureComponent<StripeupeShippingAddressProps> {\n    async componentDidMount(): Promise<void> {\n        const {\n            initialize,\n            methodId,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await initialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const {\n            deinitialize,\n            methodId,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await deinitialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    render(): ReactNode {\n\n        return (\n            <>\n                <div className=\"stepHeader\" style={ { padding: 0 } }>\n                    <div id=\"StripeUpeShipping\" style={ { width: '100%' } } />\n                </div>\n                <br />\n            </>\n        );\n    }\n}\n\nexport default StripeShippingAddressDisplay;\n","import {\n    Address,\n    CheckoutSelectors,\n    Consignment,\n    Country,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n    StripeShippingEvent\n} from '@bigcommerce/checkout-sdk';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport React, { FunctionComponent, memo, useCallback, useEffect, useState } from 'react';\n\nimport CheckoutStepStatus from '../../checkout/CheckoutStepStatus';\nimport { getAppliedStyles } from '../../common/dom';\nimport getRecommendedShippingOption from '../getRecommendedShippingOption';\nimport hasSelectedShippingOptions from '../hasSelectedShippingOptions';\nimport { SingleShippingFormValues } from '../SingleShippingForm';\n\nimport StripeShippingAddressDisplay from './StripeShippingAddressDisplay';\nimport StripeStateMapper from './StripeStateMapper';\n\nexport interface StripeShippingAddressProps {\n    consignments: Consignment[];\n    countries?: Country[];\n    shippingAddress?: Address;\n    step: CheckoutStepStatus;\n    shouldDisableSubmit: boolean;\n    isStripeLoading?(): void;\n    isStripeAutoStep?(): void;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onAddressSelect(address: Address): void;\n    onSubmit(values: SingleShippingFormValues): void;\n}\n\nconst StripeShippingAddress: FunctionComponent<StripeShippingAddressProps> = (props) => {\n    const {\n        countries,\n        consignments,\n        onAddressSelect,\n        initialize,\n        deinitialize,\n        shouldDisableSubmit,\n        onSubmit,\n        step,\n        isStripeLoading,\n        isStripeAutoStep,\n    } = props;\n\n    const [isNewAddress, setIsNewAddress] = useState(true);\n    const [isFirstShippingRender, setIsFirstShippingRender] = useState(true);\n    const [stripeShippingAddress, setStripeShippingAddress] =  useState({\n        firstName: '',\n        lastName: '',\n        company: '',\n        address1: '',\n        address2: '',\n        city: '',\n        stateOrProvince: '',\n        stateOrProvinceCode: '',\n        shouldSaveAddress: true,\n        country: '',\n        countryCode: '',\n        postalCode: '',\n        phone: '',\n        customFields: [],\n    });\n\n    const handleLoading = useCallback(() => {\n        if (isStripeLoading) {\n            isStripeLoading();\n        }\n    }, [isStripeLoading]);\n\n    useEffect(() => {\n        if (consignments[0]) {\n            const {availableShippingOptions} = consignments[0];\n\n            if (availableShippingOptions && !getRecommendedShippingOption(availableShippingOptions)) {\n                handleLoading();\n            }\n        }\n    }, [consignments]);\n\n    useEffect(() => {\n        if (!isFirstShippingRender && stripeShippingAddress.firstName && !isNewAddress && hasSelectedShippingOptions(consignments)) {\n            setTimeout(() => {\n                if (isStripeLoading && isStripeAutoStep) {\n                    isStripeLoading();\n                    isStripeAutoStep();\n                }\n\n                onSubmit({billingSameAsShipping: true, shippingAddress: stripeShippingAddress, orderComment: ''});\n            }, 300);\n        }\n    }, [isFirstShippingRender, onSubmit, stripeShippingAddress, shouldDisableSubmit, isNewAddress ,consignments]);\n\n    const availableShippingList = countries?.map(country => ({code: country.code, name: country.name}));\n    const allowedCountries = availableShippingList ? availableShippingList.map(country => country.code).join(', ') : '';\n\n    const handleStripeShippingAddress = useCallback(async (shipping: StripeShippingEvent) => {\n        const {complete, value: { address = { country: '', state: '', line1: '', line2: '', city: '', postal_code: '' }\n            , name = '' } } = shipping;\n\n        if(complete) {\n            if (step.isComplete) {\n                handleLoading();\n            }\n\n            const names = name.split(' ');\n            // @ts-ignore\n            const country = availableShippingList?.find(country => country.code === address.country).name;\n            const state = StripeStateMapper(address.country, address.state);\n            const shippingValue = {\n                firstName: names[0],\n                lastName: names[1] || ' ',\n                company: '',\n                address1: address.line1,\n                address2: address.line2 || '',\n                city: address.city,\n                stateOrProvince: state,\n                stateOrProvinceCode: state,\n                shouldSaveAddress: true,\n                country: country || address.country,\n                countryCode: address.country,\n                postalCode: address.postal_code,\n                phone: '',\n                customFields: [],\n            };\n\n            if (!step.isComplete) {\n                setIsFirstShippingRender(current => !current);\n            }\n\n            onAddressSelect(shippingValue);\n            setStripeShippingAddress(shippingValue);\n\n            if (shipping.isNewAddress !== isNewAddress) {\n                setIsNewAddress(current => !current);\n            }\n        } else {\n            handleLoading();\n        }\n\n    }, [availableShippingList, onAddressSelect]);\n\n    const initializeShipping = useCallback(\n        memoizeOne(\n            (defaultOptions: ShippingInitializeOptions) => (options?: ShippingInitializeOptions) =>\n                initialize({\n                    ...defaultOptions,\n                    ...options,\n                }),\n        ),\n        [],\n    );\n\n    const getStylesFromElement = (\n        id: string,\n        properties: string[]) => {\n        const parentContainer = document.getElementById(id);\n\n        if (parentContainer) {\n            return getAppliedStyles(parentContainer, properties);\n        }\n \n            return undefined;\n        \n    };\n\n    const getStripeStyles: any = useCallback( () => {\n        const containerId = 'stripe-card-component-field';\n        const formInput = getStylesFromElement(`${containerId}--input`, ['color', 'background-color', 'border-color', 'box-shadow']);\n        const formLabel = getStylesFromElement(`${containerId}--label`, ['color']);\n        const formError = getStylesFromElement(`${containerId}--error`, ['color']);\n\n        return formLabel && formInput && formError ? {\n            labelText: formLabel.color,\n            fieldText: formInput.color,\n            fieldPlaceholderText: formInput.color,\n            fieldErrorText: formError.color,\n            fieldBackground: formInput['background-color'],\n            fieldInnerShadow: formInput['box-shadow'],\n            fieldBorder: formInput['border-color'],\n        } : undefined;\n    }, [])\n\n        const options: ShippingInitializeOptions = {\n            stripeupe: {\n                container: 'StripeUpeShipping',\n                onChangeShipping: handleStripeShippingAddress,\n                availableCountries: allowedCountries,\n                getStyles: getStripeStyles,\n                gatewayId: 'stripeupe',\n                methodId: 'card',\n            },\n        };\n\n        const renderCheckoutThemeStylesForStripeUPE = () => {\n            const containerId = 'stripe-card-component-field';\n\n            return (\n                <div\n                    className=\"optimizedCheckout-form-input\"\n                    id={ `${containerId}--input` }\n                    placeholder=\"1111\"\n                >\n                    <div\n                        className=\"form-field--error\"\n                    >\n                        <div\n                            className=\"optimizedCheckout-form-label\"\n                            id={ `${containerId}--error` }\n                        />\n                    </div>\n                    <div\n                        className=\"optimizedCheckout-form-label\"\n                        id={ `${containerId}--label` }\n                    />\n                </div>\n            );\n        };\n\n        return (\n            <>\n                <StripeShippingAddressDisplay\n                    deinitialize={ deinitialize }\n                    initialize={ initializeShipping(options) }\n                    methodId=\"stripeupe\"\n                />\n                { renderCheckoutThemeStylesForStripeUPE() }\n            </>\n        );\n};\n\nexport default memo(StripeShippingAddress);\n","export default function StripeStateMapper(country: string, state: string): string {\n\n    const bigcommerceStates: any = {\n        'MX': {\n            'Ags.': 'AGU',\n            'B.C.': 'BCN',\n            'B.C.S.': 'BCS',\n            'Camp.': 'CAM',\n            'Coah.': 'COA',\n            'Col.': 'COL',\n            'Chis.': 'CHP',\n            'Chih.': 'CHH',\n            'Dgo.': 'DUR',\n            'Gto.': 'GUA',\n            'Gro.': 'GRO',\n            'Hgo.': 'HID',\n            'Jal.': 'JAL',\n            'Méx.': 'MEX',\n            'CDMX': 'MEX',\n            'Mich.': 'MIC',\n            'Mor.': 'MOR',\n            'Nay.': 'NAY',\n            'N.L.': 'NLE',\n            'Oax.': 'OAX',\n            'Pue.': 'PUE',\n            'Qro.': 'QUE',\n            'Q.R.': 'ROO',\n            'S.L.P.': 'SLP',\n            'Sin.': 'SIN',\n            'Son.': 'SON',\n            'Tab.': 'TAB',\n            'Tamps.': 'TAM',\n            'Tlax.': 'TLA',\n            'Ver.': 'VER',\n            'Yuc.': 'YUC',\n            'Zac.': 'ZAC',\n        },\n        'AR': {\n            'Ciudad Autónoma de Buenos Aires': 'C',\n            'Buenos Aires': 'B',\n            'Catamarca': 'K',\n            'Chaco': 'H',\n            'Chubut': 'U',\n            'Córdoba': 'X',\n            'Corrientes': 'W',\n            'Entre Ríos': 'E',\n            'Formosa': 'P',\n            'Jujuy': 'Y',\n            'La Pampa': 'L',\n            'La Rioja': 'F',\n            'Mendoza': 'M',\n            'Misiones': 'N',\n            'Neuquén': 'Q',\n            'Salta': 'A',\n            'San Juan': 'J',\n            'San Luis': 'D',\n            'Santa Fe': 'S',\n            'Santiago del Estero': 'G',\n            'Tierra del Fuego': 'V',\n            'Tucumán': 'W',\n        },\n        'IN': {\n            'Andhra Pradesh': 'AP',\n            'Arunachal Pradesh': 'AR',\n            'Assam': 'AS',\n            'Bihar': 'BR',\n            'Chhattisgarh': 'CG',\n            'Goa': 'GA',\n            'Gujarat': 'GJ',\n            'Haryana': 'HR',\n            'Himachal Pradesh': 'HP',\n            'Jammu and Kashmir': 'JK',\n            'Jharkhand': 'JH',\n            'Karnataka': 'KA',\n            'Kerala': 'KL',\n            'Madhya Pradesh': 'MP',\n            'Maharashtra': 'MH',\n            'Manipur': 'MN',\n            'Meghalaya': 'ML',\n            'Mizoram': 'MZ',\n            'Nagaland': 'NL',\n            'Odisha': 'OR',\n            'Punjab': 'PB',\n            'Rajasthan': 'RJ',\n            'Sikkim': 'SK',\n            'Tamil Nadu': 'TN',\n            'Tripura': 'TR',\n            'Uttarakhand': 'UK',\n            'Uttar Pradesh': 'UP',\n            'West Bengal': 'WB',\n            'Andaman and Nicobar Islands': 'AN',\n            'Chandigarh': 'CH',\n            'Dadra and Nagar Haveli and Daman and Diu': 'DN',\n            'Lakshadweep': 'LD',\n            'Delhi': 'DL',\n            'Puducherry': 'PY',\n            'Telangana': 'TS',\n        },\n        'ID': {\n            'Bali': 'BA',\n            'Banten': 'BT',\n            'Bengkulu': 'BE',\n            'Aceh': 'DA',\n            'DKI Jakarta': 'JK',\n            'Sumatera Utara': 'SU',\n            'Sumatera Barat': 'SB',\n            'Riau': 'SI',\n            'Jambi': 'JA',\n            'Sumatera Selatan': 'SS',\n            'Lampung': 'LA',\n            'Jawa Barat': 'JB',\n            'Jawa Timur': 'JT',\n            'Daerah Istimewa Yogyakarta': 'DY',\n            'Kalimantan Barat': 'KB',\n            'Kalimantan Tengah': 'KT',\n            'Kalimantan Timur': 'KI',\n            'Kalimantan Selatan': 'KS',\n            'Nusa Tenggara Barat': 'NB',\n            'Nusa Tenggara Timur': 'NT',\n            'Sulawesi Selatan': 'SN',\n            'Sulawesi Tengah': 'ST',\n            'Sulawesi Utara': 'SA',\n            'Sulawesi Tenggara': 'SG',\n            'Maluku': 'MA',\n            'Maluku Utara': 'MU',\n            'Gorontalo': 'GO',\n        },\n        'MY': {\n            'Johor': 'JHR',\n            'Kedah': 'KDH',\n            'Kelantan': 'KTN',\n            'Melaka': 'MLK',\n            'Negeri Sembilan': 'NSN',\n            'Pahang': 'PHG',\n            'Pulau Pinang': 'PNG',\n            'Perak': 'PRK',\n            'Perlis': 'PLS',\n            'Selangor': 'SGR',\n            'Terengganu': 'TRG',\n            'Sabah': 'SBH',\n            'Sarawak': 'SRW',\n            'Kuala Lumpur': 'KUL',\n            'Labuan': 'LBN',\n            'Putrajaya': 'PJY',\n        },\n        'IE': {\n            'Carlow': 'CW',\n            'Cavan': 'CN',\n            'Clare': 'CE',\n            'Donegal': 'DL',\n            'Dublin': 'D',\n            'Galway': 'G',\n            'Kildare': 'KE',\n            'Kilkenny': 'KK',\n            'Laois': 'LS',\n            'Leitrim': 'LM',\n            'Longford': 'LD',\n            'Louth': 'LH',\n            'Mayo': 'MO',\n            'Meath': 'MH',\n            'Monaghan': 'MN',\n            'Offaly': 'OY',\n            'Roscommon': 'RN',\n            'Sligo': 'SO',\n            'Tipperary': 'TA',\n            'Waterford': 'WD',\n            'Westmeath': 'WH',\n            'Wexford': 'WX',\n            'Wicklow': 'WW',\n        },\n        'ES': {\n            'C': 'ACOR',\n            'VI': 'ALAV',\n            'AB': 'ALBA',\n            'A': 'ALIC',\n            'AL': 'ALME',\n            'O': 'ASTU',\n            'AV': 'AVIL',\n            'BA': 'BADA',\n            'PM': 'BALE',\n            'B': 'BARC',\n            'BU': 'BURG',\n            'CC': 'CACE',\n            'CA': 'CADI',\n            'S': 'CANT',\n            'CS': 'CAST',\n            'CE': 'CEUT',\n            'CR': 'CIUD',\n            'CO': 'CORD',\n            'CU': 'CUEN',\n            'GI': 'GIRO',\n            'GR': 'GRAN',\n            'GU': 'GUAD',\n            'SS': 'GUIP',\n            'H': 'HUEL',\n            'HU': 'HUES',\n            'J': 'JAEN',\n            'LO': 'LAR',\n            'GC': 'LAS',\n            'LE': 'LEON',\n            'L': 'LLEI',\n            'LU': 'LUGO',\n            'M': 'MADR',\n            'MA': 'MALA',\n            'ML': 'MELI',\n            'MU': 'MURC',\n            'NA': 'NAVA',\n            'OR': 'OURE',\n            'P': 'PALE',\n            'PO': 'PONT',\n            'SA': 'SALA',\n            'TF': 'SANT',\n            'SG': 'SEGO',\n            'SE': 'SEVI',\n            'SO': 'SORI',\n            'T': 'TARR',\n            'TE': 'TERU',\n            'TP': 'TOLE',\n            'V': 'VALE',\n            'VA': 'VALL',\n            'BI': 'VIZC',\n            'ZA': 'ZAMO',\n            'Z': 'ZARA',\n        }\n    };\n\n    if (bigcommerceStates[country]) {\n        return bigcommerceStates[country][state] || state;\n    }\n\n    return state;\n}\n","import {\n    Address,\n    CheckoutParams,\n    CheckoutSelectors,\n    Consignment,\n    Country,\n    FormField,\n    RequestOptions,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { FormikProps, withFormik } from 'formik';\nimport { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\nimport { lazy, object } from 'yup';\n\nimport {\n    AddressFormValues,\n    getAddressFormFieldsValidationSchema,\n    getTranslateAddressError,\n    mapAddressToFormValues,\n} from '../../address';\nimport CheckoutStepStatus from '../../checkout/CheckoutStepStatus';\nimport { getCustomFormFieldsValidationSchema } from '../../formFields';\nimport { withLanguage, WithLanguageProps } from '../../locale';\nimport { Fieldset, Form, FormContext } from '../../ui/form';\nimport BillingSameAsShippingField from '../BillingSameAsShippingField';\nimport hasSelectedShippingOptions from '../hasSelectedShippingOptions';\nimport ShippingFormFooter from '../ShippingFormFooter';\n\nimport StripeShippingAddress from './StripeShippingAddress';\n\nexport interface SingleShippingFormProps {\n    isBillingSameAsShipping: boolean;\n    cartHasChanged: boolean;\n    consignments: Consignment[];\n    countries: Country[];\n    customerMessage: string;\n    isLoading: boolean;\n    isMultiShippingMode: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowOrderComments: boolean;\n    step: CheckoutStepStatus;\n    isStripeLoading?(): void;\n    isStripeAutoStep?(): void;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    getFields(countryCode?: string): FormField[];\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onSubmit(values: SingleShippingFormValues): void;\n    onUnhandledError?(error: Error): void;\n    updateAddress(\n        address: Partial<Address>,\n        options?: RequestOptions<CheckoutParams>,\n    ): Promise<CheckoutSelectors>;\n}\n\nexport interface SingleShippingFormValues {\n    billingSameAsShipping: boolean;\n    shippingAddress?: AddressFormValues;\n    orderComment: string;\n}\n\ninterface SingleShippingFormState {\n    isUpdatingShippingData: boolean;\n}\n\nclass StripeShippingForm extends PureComponent<\n    SingleShippingFormProps & WithLanguageProps & FormikProps<SingleShippingFormValues>\n    > {\n    static contextType = FormContext;\n\n    state: SingleShippingFormState = {\n        isUpdatingShippingData: false,\n    };\n\n    render(): ReactNode {\n        const {\n            cartHasChanged,\n            isLoading,\n            countries,\n            isStripeLoading,\n            shippingAddress,\n            consignments,\n            shouldShowOrderComments,\n            initialize,\n            isValid,\n            deinitialize,\n            onSubmit,\n            isStripeAutoStep,\n            step,\n        } = this.props;\n\n        const { isUpdatingShippingData } = this.state;\n\n        return (\n            <Form autoComplete=\"on\">\n                <Fieldset>\n                    <StripeShippingAddress\n                        consignments={consignments}\n                        countries={countries}\n                        deinitialize={deinitialize}\n                        initialize={initialize}\n                        isStripeAutoStep={isStripeAutoStep}\n                        isStripeLoading={isStripeLoading}\n                        onAddressSelect={this.handleAddressSelect}\n                        onSubmit={onSubmit}\n                        shippingAddress={shippingAddress}\n                        shouldDisableSubmit={this.shouldDisableSubmit()}\n                        step={step}\n                    />\n                    <div className=\"form-body\">\n                        <BillingSameAsShippingField />\n                    </div>\n                </Fieldset>\n\n                <ShippingFormFooter\n                    cartHasChanged={cartHasChanged}\n                    isLoading={isLoading || isUpdatingShippingData}\n                    isMultiShippingMode={false}\n                    shouldDisableSubmit={this.shouldDisableSubmit()}\n                    shouldShowOrderComments={shouldShowOrderComments}\n                    shouldShowShippingOptions={isValid}\n                />\n            </Form>\n        );\n    }\n\n    private shouldDisableSubmit: () => boolean = () => {\n        const { isLoading, consignments, isValid } = this.props;\n\n        const { isUpdatingShippingData } = this.state;\n\n        if (!isValid) {\n            return false;\n        }\n\n        return isLoading || isUpdatingShippingData || !hasSelectedShippingOptions(consignments);\n    };\n\n    private handleAddressSelect: (address: Address) => void = async (address) => {\n        const { updateAddress, onUnhandledError = noop, values, setValues } = this.props;\n\n        try {\n            await updateAddress(address);\n\n            setValues({\n                ...values,\n                shippingAddress: mapAddressToFormValues(\n                    this.getFields(address.countryCode),\n                    address,\n                ),\n            });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    };\n\n    private getFields(countryCode: string | undefined): FormField[] {\n        const { getFields } = this.props;\n\n        return getFields(countryCode);\n    }\n}\n\nexport default withLanguage(\n    withFormik<SingleShippingFormProps & WithLanguageProps, SingleShippingFormValues>({\n        handleSubmit: (values, { props: { onSubmit } }) => {\n            onSubmit(values);\n        },\n        mapPropsToValues: ({\n                               getFields,\n                               shippingAddress,\n                               isBillingSameAsShipping,\n                               customerMessage,\n                           }) => ({\n            billingSameAsShipping: isBillingSameAsShipping,\n            orderComment: customerMessage,\n            shippingAddress: mapAddressToFormValues(\n                getFields(shippingAddress && shippingAddress.countryCode),\n                shippingAddress,\n            ),\n        }),\n        isInitialValid: ({ shippingAddress, getFields, language }) =>\n            !!shippingAddress &&\n            getAddressFormFieldsValidationSchema({\n                language,\n                formFields: getFields(shippingAddress.countryCode),\n            }).isValidSync(shippingAddress),\n        validationSchema: ({\n                               language,\n                               getFields,\n                               methodId,\n                           }: SingleShippingFormProps & WithLanguageProps) =>\n            methodId\n                ? object({\n                    shippingAddress: lazy<Partial<AddressFormValues>>((formValues) =>\n                        getCustomFormFieldsValidationSchema({\n                            translate: getTranslateAddressError(language),\n                            formFields: getFields(formValues && formValues.countryCode),\n                        }),\n                    ),\n                })\n                : object({\n                    shippingAddress: lazy<Partial<AddressFormValues>>((formValues) =>\n                        getAddressFormFieldsValidationSchema({\n                            language,\n                            formFields: getFields(formValues && formValues.countryCode),\n                        }),\n                    ),\n                }),\n        enableReinitialize: false,\n    })(StripeShippingForm),\n);\n","import {\n    Address,\n    CheckoutSelectors,\n    Consignment,\n    Country,\n    Customer,\n    FormField,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport React, { Component, ReactNode } from 'react';\n\nimport CheckoutStepStatus from '../../checkout/CheckoutStepStatus';\nimport { LoadingOverlay } from '../../ui/loading';\nimport ShippingHeader from '../ShippingHeader';\n\nimport StripeShippingForm, { SingleShippingFormValues } from './StripeShippingForm';\n\nexport interface StripeShippingProps {\n    isBillingSameAsShipping: boolean;\n    cartHasChanged: boolean;\n    isMultiShippingMode: boolean;\n    step: CheckoutStepStatus;\n    consignments: Consignment[];\n    countries: Country[];\n    customer: Customer;\n    customerMessage: string;\n    isGuest: boolean;\n    isInitializing: boolean;\n    isLoading: boolean;\n    isShippingStepPending: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowAddAddressInCheckout: boolean;\n    shouldShowMultiShipping: boolean;\n    shouldShowOrderComments: boolean;\n    onReady?(): void;\n    onUnhandledError(error: Error): void;\n    onSubmit(values: SingleShippingFormValues): void;\n    onMultiShippingChange(): void;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    loadShippingAddressFields(): Promise<CheckoutSelectors>;\n    loadShippingOptions(): Promise<CheckoutSelectors>;\n    updateAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n    getFields(countryCode?: string): FormField[];\n}\n\ninterface StripeShippingState {\n    isStripeLoading: boolean;\n    isStripeAutoStep: boolean;\n}\n\nclass StripeShipping extends Component<StripeShippingProps, StripeShippingState> {\n    constructor(props: StripeShippingProps) {\n        super(props);\n\n        this.state = {\n            isStripeLoading: true,\n            isStripeAutoStep: false,\n        };\n    }\n\n    render(): ReactNode {\n        const {\n            isBillingSameAsShipping,\n            isGuest,\n            shouldShowMultiShipping,\n            customer,\n            updateAddress,\n            initialize,\n            deinitialize,\n            isMultiShippingMode,\n            step,\n            onSubmit,\n            onMultiShippingChange,\n            isLoading,\n            ...shippingFormProps\n        } = this.props;\n\n        const {\n            isStripeLoading,\n            isStripeAutoStep,\n        } = this.state;\n\n\n            return <div className=\"checkout-form\">\n                <div style={ {display: isStripeAutoStep ? 'none' : undefined,} }>\n                    <LoadingOverlay\n                        hideContentWhenLoading\n                        isLoading={ isStripeLoading }\n                    >\n                        <ShippingHeader\n                            isGuest={ isGuest }\n                            isMultiShippingMode={ isMultiShippingMode }\n                            onMultiShippingChange={ onMultiShippingChange }\n                            shouldShowMultiShipping={ shouldShowMultiShipping }\n                        />\n\n                        <LoadingOverlay\n                            isLoading={ isLoading }\n                            unmountContentWhenLoading\n                        >\n                            <StripeShippingForm\n                                { ...shippingFormProps }\n                                deinitialize={deinitialize}\n                                initialize={initialize}\n                                isBillingSameAsShipping={isBillingSameAsShipping}\n                                isLoading={ isLoading }\n                                isMultiShippingMode={isMultiShippingMode}\n                                isStripeAutoStep={this.handleIsAutoStep}\n                                isStripeLoading={this.stripeLoadedCallback}\n                                onSubmit={onSubmit}\n                                step={step}\n                                updateAddress={updateAddress}\n                            />\n                        </LoadingOverlay>\n                    </LoadingOverlay>\n                </div>\n            </div>\n    }\n\n    private stripeLoadedCallback: () => void = () => {\n        this.setState({ isStripeLoading: false });\n    }\n\n    private handleIsAutoStep: () => void = () => {\n        this.setState({ isStripeAutoStep: true });\n    }\n}\n\nexport default StripeShipping;\n","import {\n    Address,\n    AddressRequestBody,\n    Cart,\n    CheckoutRequestBody,\n    CheckoutSelectors,\n    Consignment,\n    ConsignmentAssignmentRequestBody,\n    Country,\n    Customer,\n    CustomerRequestOptions,\n    FormField,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\nimport { createSelector } from 'reselect';\n\nimport { AddressFormSkeleton } from '@bigcommerce/checkout/ui';\n\nimport { isEqualAddress, mapAddressFromFormValues } from '../address';\nimport { CheckoutContextProps, withCheckout } from '../checkout';\nimport CheckoutStepStatus from '../checkout/CheckoutStepStatus';\nimport { EMPTY_ARRAY, isFloatingLabelEnabled } from '../common/utility';\nimport { PaymentMethodId } from '../payment/paymentMethod';\n\nimport { UnassignItemError } from './errors';\nimport getShippableItemsCount from './getShippableItemsCount';\nimport getShippingMethodId from './getShippingMethodId';\nimport { MultiShippingFormValues } from './MultiShippingForm';\nimport ShippingForm from './ShippingForm';\nimport ShippingHeader from './ShippingHeader';\nimport { SingleShippingFormValues } from './SingleShippingForm';\nimport StripeShipping from './stripeUPE/StripeShipping';\n\nexport interface ShippingProps {\n    isBillingSameAsShipping: boolean;\n    cartHasChanged: boolean;\n    isMultiShippingMode: boolean;\n    step: CheckoutStepStatus;\n    onCreateAccount(): void;\n    onToggleMultiShipping(): void;\n    onReady?(): void;\n    onUnhandledError(error: Error): void;\n    onSignIn(): void;\n    navigateNextStep(isBillingSameAsShipping: boolean): void;\n}\n\nexport interface WithCheckoutShippingProps {\n    billingAddress?: Address;\n    cart: Cart;\n    consignments: Consignment[];\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    customer: Customer;\n    customerMessage: string;\n    googleMapsApiKey: string;\n    isGuest: boolean;\n    isInitializing: boolean;\n    isLoading: boolean;\n    isShippingStepPending: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowAddAddressInCheckout: boolean;\n    shouldShowMultiShipping: boolean;\n    shouldShowOrderComments: boolean;\n    isStripeLinkEnabled?: boolean;\n    useFloatingLabel?: boolean;\n    assignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n    deinitializeShippingMethod(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    deleteConsignments(): Promise<Address | undefined>;\n    getFields(countryCode?: string): FormField[];\n    initializeShippingMethod(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    loadShippingAddressFields(): Promise<CheckoutSelectors>;\n    loadShippingOptions(): Promise<CheckoutSelectors>;\n    signOut(options?: CustomerRequestOptions): void;\n    createCustomerAddress(address: AddressRequestBody): Promise<CheckoutSelectors>;\n    unassignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n    updateBillingAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n    updateCheckout(payload: CheckoutRequestBody): Promise<CheckoutSelectors>;\n    updateShippingAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n    loadPaymentMethods(): Promise<CheckoutSelectors>;\n}\n\ninterface ShippingState {\n    isInitializing: boolean;\n}\n\nclass Shipping extends Component<ShippingProps & WithCheckoutShippingProps, ShippingState> {\n    constructor(props: ShippingProps & WithCheckoutShippingProps) {\n        super(props);\n\n        this.state = {\n            isInitializing: true,\n        };\n    }\n\n    async componentDidMount(): Promise<void> {\n        const {\n            loadShippingAddressFields,\n            loadShippingOptions,\n            loadPaymentMethods,\n            onReady = noop,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await Promise.all([loadShippingAddressFields(), loadShippingOptions()]);\n\n            onReady();\n            await loadPaymentMethods();\n        } catch (error) {\n            onUnhandledError(error);\n        } finally {\n            this.setState({ isInitializing: false });\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            isBillingSameAsShipping,\n            isGuest,\n            shouldShowMultiShipping,\n            customer,\n            unassignItem,\n            updateShippingAddress,\n            initializeShippingMethod,\n            deinitializeShippingMethod,\n            isMultiShippingMode,\n            onToggleMultiShipping,\n            isStripeLinkEnabled,\n            step,\n            useFloatingLabel,\n            ...shippingFormProps\n        } = this.props;\n\n        const {\n            isInitializing,\n        } = this.state;\n\n        if (isStripeLinkEnabled && !customer.email) {\n            return <StripeShipping\n                { ...shippingFormProps }\n                customer={ customer }\n                deinitialize={deinitializeShippingMethod}\n                initialize={initializeShippingMethod}\n                isBillingSameAsShipping={isBillingSameAsShipping}\n                isGuest={ isGuest }\n                isLoading={ isInitializing }\n                isMultiShippingMode={isMultiShippingMode}\n                onMultiShippingChange={ this.handleMultiShippingModeSwitch }\n                onSubmit={this.handleSingleShippingSubmit}\n                shouldShowMultiShipping={ shouldShowMultiShipping }\n                step={step}\n                updateAddress={updateShippingAddress}\n            />;\n        }\n\n        return (\n            <AddressFormSkeleton isLoading={isInitializing}>\n                <div className=\"checkout-form\">\n                    <ShippingHeader\n                        isGuest={isGuest}\n                        isMultiShippingMode={isMultiShippingMode}\n                        onMultiShippingChange={this.handleMultiShippingModeSwitch}\n                        shouldShowMultiShipping={shouldShowMultiShipping}\n                    />\n                    <ShippingForm\n                        {...shippingFormProps}\n                        addresses={customer.addresses}\n                        deinitialize={deinitializeShippingMethod}\n                        initialize={initializeShippingMethod}\n                        isBillingSameAsShipping={isBillingSameAsShipping}\n                        isGuest={isGuest}\n                        isMultiShippingMode={isMultiShippingMode}\n                        onMultiShippingSubmit={this.handleMultiShippingSubmit}\n                        onSingleShippingSubmit={this.handleSingleShippingSubmit}\n                        onUseNewAddress={this.handleUseNewAddress}\n                        shouldShowSaveAddress={!isGuest}\n                        updateAddress={updateShippingAddress}\n                        useFloatingLabel={useFloatingLabel}\n                    />\n                </div>\n            </AddressFormSkeleton>\n        );\n    }\n\n    private handleMultiShippingModeSwitch: () => void = async () => {\n        const {\n            consignments,\n            isMultiShippingMode,\n            onToggleMultiShipping = noop,\n            onUnhandledError = noop,\n            updateShippingAddress,\n        } = this.props;\n\n        if (isMultiShippingMode && consignments.length > 1) {\n            this.setState({ isInitializing: true });\n\n            try {\n                // Collapse all consignments into one\n                await updateShippingAddress(consignments[0].shippingAddress);\n            } catch (error) {\n                onUnhandledError(error);\n            } finally {\n                this.setState({ isInitializing: false });\n            }\n        }\n\n        onToggleMultiShipping();\n    };\n\n    private handleSingleShippingSubmit: (values: SingleShippingFormValues) => void = async ({\n        billingSameAsShipping,\n        shippingAddress: addressValues,\n        orderComment,\n    }) => {\n        const {\n            customerMessage,\n            updateCheckout,\n            updateShippingAddress,\n            updateBillingAddress,\n            navigateNextStep,\n            onUnhandledError,\n            shippingAddress,\n            billingAddress,\n            methodId,\n        } = this.props;\n\n        const updatedShippingAddress = addressValues && mapAddressFromFormValues(addressValues);\n        const promises: Array<Promise<CheckoutSelectors>> = [];\n        const hasRemoteBilling = this.hasRemoteBilling(methodId);\n\n        if (!isEqualAddress(updatedShippingAddress, shippingAddress)) {\n            promises.push(updateShippingAddress(updatedShippingAddress || {}));\n        }\n\n        if (\n            billingSameAsShipping &&\n            updatedShippingAddress &&\n            !isEqualAddress(updatedShippingAddress, billingAddress) &&\n            !hasRemoteBilling\n        ) {\n            promises.push(updateBillingAddress(updatedShippingAddress));\n        }\n\n        if (customerMessage !== orderComment) {\n            promises.push(updateCheckout({ customerMessage: orderComment }));\n        }\n\n        try {\n            await Promise.all(promises);\n\n            navigateNextStep(billingSameAsShipping);\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    private hasRemoteBilling: (methodId?: string) => boolean = (methodId) => {\n        const PAYMENT_METHOD_VALID = ['amazonpay'];\n\n        return PAYMENT_METHOD_VALID.some((method) => method === methodId);\n    };\n\n    private handleUseNewAddress: (address: Address, itemId: string) => void = async (\n        address,\n        itemId,\n    ) => {\n        const { unassignItem, onUnhandledError } = this.props;\n\n        try {\n            await unassignItem({\n                address,\n                lineItems: [\n                    {\n                        quantity: 1,\n                        itemId,\n                    },\n                ],\n            });\n\n            location.href = '/account.php?action=add_shipping_address&from=checkout';\n        } catch (error) {\n            if (error instanceof UnassignItemError) {\n                onUnhandledError(new UnassignItemError(error));\n            }\n        }\n    };\n\n    private handleMultiShippingSubmit: (values: MultiShippingFormValues) => void = async ({\n        orderComment,\n    }) => {\n        const { customerMessage, updateCheckout, navigateNextStep, onUnhandledError } = this.props;\n\n        try {\n            if (customerMessage !== orderComment) {\n                await updateCheckout({ customerMessage: orderComment });\n            }\n\n            navigateNextStep(false);\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n}\n\nconst deleteConsignmentsSelector = createSelector(\n    ({ checkoutService: { deleteConsignment } }: CheckoutContextProps) => deleteConsignment,\n    ({ checkoutState: { data } }: CheckoutContextProps) => data.getConsignments(),\n    (deleteConsignment, consignments) => async () => {\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        const [{ data }] = await Promise.all(consignments.map(({ id }) => deleteConsignment(id)));\n\n        return data.getShippingAddress();\n    },\n);\n\n// tslint:disable-next-line:cyclomatic-complexity\nexport function mapToShippingProps({\n    checkoutService,\n    checkoutState,\n}: CheckoutContextProps): WithCheckoutShippingProps | null {\n    const {\n        data: {\n            getCart,\n            getCheckout,\n            getConfig,\n            getCustomer,\n            getConsignments,\n            getShippingAddress,\n            getBillingAddress,\n            getShippingAddressFields,\n            getShippingCountries,\n            getPaymentMethod,\n        },\n        statuses: {\n            isShippingStepPending,\n            isSelectingShippingOption,\n            isLoadingShippingOptions,\n            isUpdatingConsignment,\n            isCreatingConsignments,\n            isCreatingCustomerAddress,\n            isLoadingShippingCountries,\n            isUpdatingBillingAddress,\n            isUpdatingCheckout,\n        },\n    } = checkoutState;\n\n    const checkout = getCheckout();\n    const config = getConfig();\n    const consignments = getConsignments() || [];\n    const customer = getCustomer();\n    const cart = getCart();\n\n    if (!checkout || !config || !customer || !cart) {\n        return null;\n    }\n\n    const {\n        checkoutSettings: {\n            enableOrderComments,\n            features,\n            hasMultiShippingEnabled,\n            googleMapsApiKey,\n        },\n    } = config;\n\n    const methodId = getShippingMethodId(checkout);\n    const shippableItemsCount = getShippableItemsCount(cart);\n    const isLoading =\n        isLoadingShippingOptions() ||\n        isSelectingShippingOption() ||\n        isUpdatingConsignment() ||\n        isCreatingConsignments() ||\n        isUpdatingBillingAddress() ||\n        isUpdatingCheckout() ||\n        isCreatingCustomerAddress();\n    const shouldShowMultiShipping =\n        hasMultiShippingEnabled && !methodId && shippableItemsCount > 1 && shippableItemsCount < 50;\n    const countriesWithAutocomplete = ['US', 'CA', 'AU', 'NZ'];\n    const stripeUpe = getPaymentMethod('card', PaymentMethodId.StripeUPE);\n    const linkEnabled = stripeUpe?.initializationData.enableLink || false;\n    const stripeUpeSupportedCurrency = cart?.currency.code === 'USD' || false;\n    const stripeUpeLinkEnabled = linkEnabled && stripeUpeSupportedCurrency;\n\n    if (features['CHECKOUT-4183.checkout_google_address_autocomplete_uk']) {\n        countriesWithAutocomplete.push('GB');\n    }\n\n    const shippingAddress =\n        !shouldShowMultiShipping && consignments.length > 1 ? undefined : getShippingAddress();\n\n    return {\n        assignItem: checkoutService.assignItemsToAddress,\n        billingAddress: getBillingAddress(),\n        cart,\n        consignments,\n        countries: getShippingCountries() || EMPTY_ARRAY,\n        countriesWithAutocomplete,\n        customer,\n        customerMessage: checkout.customerMessage,\n        createCustomerAddress: checkoutService.createCustomerAddress,\n        deinitializeShippingMethod: checkoutService.deinitializeShipping,\n        deleteConsignments: deleteConsignmentsSelector({ checkoutService, checkoutState }),\n        getFields: getShippingAddressFields,\n        googleMapsApiKey,\n        initializeShippingMethod: checkoutService.initializeShipping,\n        isGuest: customer.isGuest,\n        isInitializing: isLoadingShippingCountries() || isLoadingShippingOptions(),\n        isLoading,\n        isShippingStepPending: isShippingStepPending(),\n        loadShippingAddressFields: checkoutService.loadShippingAddressFields,\n        loadShippingOptions: checkoutService.loadShippingOptions,\n        methodId,\n        shippingAddress,\n        shouldShowMultiShipping,\n        shouldShowAddAddressInCheckout:\n            features['CHECKOUT-4726.add_address_in_multishipping_checkout'],\n        shouldShowOrderComments: enableOrderComments,\n        signOut: checkoutService.signOutCustomer,\n        unassignItem: checkoutService.unassignItemsToAddress,\n        updateBillingAddress: checkoutService.updateBillingAddress,\n        updateCheckout: checkoutService.updateCheckout,\n        updateShippingAddress: checkoutService.updateShippingAddress,\n        isStripeLinkEnabled: stripeUpeLinkEnabled,\n        loadPaymentMethods: checkoutService.loadPaymentMethods,\n        useFloatingLabel: isFloatingLabelEnabled(config.checkoutSettings),\n    };\n}\n\nexport default withCheckout(mapToShippingProps)(Shipping);\n","import { noop } from 'lodash';\nimport { createContext } from 'react';\n\nexport interface AccordionContextProps {\n    selectedItemId?: string;\n    onToggle(id: string): void;\n}\n\nconst AccordionContext = createContext<AccordionContextProps>({ onToggle: noop });\n\nexport default AccordionContext;\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\n\nimport AccordionContext from './AccordionContext';\n\nexport interface AccordionProps {\n    children: ReactNode;\n    className?: string;\n    defaultSelectedItemId?: string;\n    isDisabled?: boolean;\n    onSelect?(id: string): void;\n}\n\nexport interface AccordionState {\n    selectedItemId?: string;\n}\n\nexport default class Accordion extends Component<AccordionProps, AccordionState> {\n    state: AccordionState = {};\n\n    private getContextValue = memoizeOne((selectedItemId) => {\n        return {\n            onToggle: this.handleToggleItem,\n            selectedItemId,\n        };\n    });\n\n    render(): ReactNode {\n        const { children, className = 'accordion', defaultSelectedItemId } = this.props;\n\n        const { selectedItemId = defaultSelectedItemId } = this.state;\n\n        return (\n            <AccordionContext.Provider value={this.getContextValue(selectedItemId)}>\n                <ul className={className}>{children}</ul>\n            </AccordionContext.Provider>\n        );\n    }\n\n    private handleToggleItem: (id: string) => void = (id) => {\n        const { isDisabled, onSelect = noop } = this.props;\n\n        if (isDisabled) {\n            return;\n        }\n\n        this.setState({ selectedItemId: id });\n        onSelect(id);\n    };\n}\n","import { noop } from 'lodash';\nimport React, {\n    createContext,\n    FunctionComponent,\n    memo,\n    ReactNode,\n    useCallback,\n    useMemo,\n} from 'react';\n\nimport { connectFormik, ConnectFormikProps } from '../../common/form';\nimport { Accordion } from '../accordion';\n\nexport interface ChecklistProps {\n    children: ReactNode;\n    defaultSelectedItemId?: string;\n    isDisabled?: boolean;\n    name: string;\n    onSelect?(value: string): void;\n}\n\nexport interface ChecklistContextProps {\n    name: string;\n}\n\nexport const ChecklistContext = createContext<ChecklistContextProps | undefined>(undefined);\n\nconst Checklist: FunctionComponent<\n    ChecklistProps & ConnectFormikProps<{ [key: string]: string }>\n> = ({ formik: { setFieldValue }, name, onSelect = noop, ...props }) => {\n    const handleSelect = useCallback(\n        (value: string) => {\n            setFieldValue(name, value);\n            onSelect(value);\n        },\n        [name, onSelect, setFieldValue],\n    );\n\n    const contextValue = useMemo(() => ({ name }), [name]);\n\n    return (\n        <ChecklistContext.Provider value={contextValue}>\n            <Accordion\n                {...props}\n                className=\"form-checklist optimizedCheckout-form-checklist\"\n                onSelect={handleSelect}\n            />\n        </ChecklistContext.Provider>\n    );\n};\n\nexport default connectFormik(memo(Checklist));\n","import classNames from 'classnames';\nimport React, { FunctionComponent, memo, ReactNode, useCallback, useContext } from 'react';\nimport { CSSTransition } from 'react-transition-group';\n\nimport AccordionContext from './AccordionContext';\n\nexport interface AccordionItemProps {\n    bodyClassName?: string;\n    children?: ReactNode;\n    className?: string;\n    classNameSelected?: string;\n    headerClassName?: string;\n    headerClassNameSelected?: string;\n    itemId: string;\n    headerContent(props: AccordionItemHeaderProps): ReactNode;\n}\n\nexport interface AccordionItemHeaderProps {\n    isSelected: boolean;\n    onToggle(id: string): void;\n}\n\nconst AccordionItem: FunctionComponent<AccordionItemProps> = ({\n    bodyClassName = 'accordion-item-body',\n    children,\n    className = 'accordion-item',\n    classNameSelected = 'accordion-item--selected',\n    headerClassName = 'accordion-item-header',\n    headerClassNameSelected = 'accordion-item-header--selected',\n    headerContent,\n    itemId,\n}) => {\n    const { onToggle, selectedItemId } = useContext(AccordionContext);\n    const isSelected = selectedItemId === itemId;\n\n    const transitionEndListener = useCallback((node, done) => {\n        node.addEventListener('transitionend', ({ target }: Event) => {\n            if (target === node) {\n                done();\n            }\n        });\n    }, []);\n\n    return (\n        <li\n            className={classNames(className, { [classNameSelected]: isSelected })}\n            data-test={`accordion-item_${itemId}`}\n        >\n            <div className={classNames(headerClassName, { [headerClassNameSelected]: isSelected })}>\n                {headerContent({ isSelected, onToggle })}\n            </div>\n\n            {children && (\n                <CSSTransition\n                    addEndListener={transitionEndListener}\n                    classNames={bodyClassName}\n                    in={isSelected}\n                    mountOnEnter\n                    timeout={{}}\n                    unmountOnExit\n                >\n                    <div className={bodyClassName}>{children}</div>\n                </CSSTransition>\n            )}\n        </li>\n    );\n};\n\nexport default memo(AccordionItem);\n","import React, { FunctionComponent, InputHTMLAttributes } from 'react';\n\nimport Input from './Input';\nimport Label from './Label';\n\nexport interface ChecklistItemInputProps extends InputHTMLAttributes<HTMLInputElement> {\n    isSelected: boolean;\n}\n\nconst ChecklistItemInput: FunctionComponent<ChecklistItemInputProps> = ({\n    id,\n    isSelected,\n    children,\n    ...props\n}) => (\n    <>\n        <Input\n            {...props}\n            checked={isSelected}\n            className=\"form-checklist-checkbox optimizedCheckout-form-checklist-checkbox\"\n            id={id}\n            type=\"radio\"\n        />\n\n        <Label htmlFor={id}>{children}</Label>\n    </>\n);\n\nexport default ChecklistItemInput;\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { FieldProps } from 'formik';\nimport { kebabCase } from 'lodash';\nimport React, { FunctionComponent, memo, ReactNode, useCallback, useContext } from 'react';\n\nimport { AccordionItem, AccordionItemHeaderProps } from '../accordion';\n\nimport BasicFormField from './BasicFormField';\nimport { ChecklistContext } from './Checklist';\nimport ChecklistItemInput from './ChecklistItemInput';\n\nexport interface ChecklistItemProps {\n    content?: ReactNode;\n    htmlId?: string;\n    isDisabled?: boolean;\n    label: ReactNode | ((isSelected: boolean) => ReactNode);\n    value: string;\n}\n\nconst ChecklistItem: FunctionComponent<ChecklistItemProps> = ({\n    isDisabled,\n    value,\n    content,\n    htmlId = kebabCase(value),\n    label,\n    ...rest\n}) => {\n    const { name = '' } = useContext(ChecklistContext) || {};\n\n    const renderInput = useCallback(\n        memoizeOne((isSelected: boolean) => ({ field }: FieldProps) => (\n            <ChecklistItemInput\n                {...field}\n                disabled={isDisabled}\n                id={htmlId}\n                isSelected={field.value === value}\n                value={value}\n            >\n                {label instanceof Function ? label(isSelected) : label}\n            </ChecklistItemInput>\n        )),\n        [htmlId, isDisabled, label, value],\n    );\n\n    const handleChange = useCallback(\n        memoizeOne((onToggle: (id: string) => void) => (selectedValue: string) => {\n            if (value === selectedValue) {\n                onToggle(value);\n            }\n        }),\n        [],\n    );\n\n    const renderHeaderContent = useCallback(\n        ({ isSelected, onToggle }: AccordionItemHeaderProps) => (\n            <BasicFormField\n                className=\"form-checklist-option\"\n                name={name}\n                onChange={handleChange(onToggle)}\n                render={renderInput(isSelected)}\n            />\n        ),\n        [handleChange, name, renderInput],\n    );\n\n    return (\n        <AccordionItem\n            {...rest}\n            bodyClassName=\"form-checklist-body\"\n            className=\"form-checklist-item optimizedCheckout-form-checklist-item\"\n            classNameSelected=\"form-checklist-item--selected optimizedCheckout-form-checklist-item--selected\"\n            headerClassName=\"form-checklist-header\"\n            headerClassNameSelected=\"form-checklist-header--selected\"\n            headerContent={renderHeaderContent}\n            itemId={value}\n        >\n            {content}\n        </AccordionItem>\n    );\n};\n\nexport default memo(ChecklistItem);\n"],"names":["getAppliedStyles","element","properties","declaration","window","getComputedStyle","reduce","result","propertyName","getPropertyValue","kebabCase","connectFormik","OriginalComponent","InnerComponent","memo","props","prevFormik","prevProps","nextFormik","nextProps","DecoratedComponent","connect","displayName","name","parseAnchor","text","div","document","createElement","innerHTML","anchor","querySelector","anchorSiblings","split","outerHTML","data","id","language","onClick","testId","translatedString","translate","parsedString","length","href","message","getLanguageService","UnassignItemError","prototype","CustomError","getShippingMethodId","checkout","preselectedPayment","getPreselectedPayment","indexOf","providerId","undefined","SaveAddressForm","withLanguage","withFormik","handleSubmit","values","onSaveAddress","mapPropsToValues","defaultCountryCode","firstName","lastName","address1","address2","customFields","country","countryCode","stateOrProvince","stateOrProvinceCode","postalCode","phone","city","company","shouldSaveAddress","validationSchema","getFields","getAddressFormFieldsValidationSchema","formFields","googleMapsApiKey","countriesWithAutocomplete","countries","setFieldValue","isLoading","onRequestClose","useFloatingLabel","Form","autoComplete","LoadingOverlay","AddressForm","shouldShowSaveAddress","className","preventDefault","TranslatedString","Button","disabled","type","variant","isOpen","onAfterOpen","addressFormProps","Modal","additionalModalClassName","header","ModalHeader","shouldShowCloseButton","title","AssignItemInvalidAddressError","AssignItemFailedError","findConsignment","consignments","itemId","find","consignment","includes","lineItemIds","getShippableLineItems","cart","lineItems","physicalItems","item","i","addedByPromotion","isNil","parentId","concat","lineItemIndex","splitItems","quantity","key","variantId","productId","splitItem","imageUrl","options","addresses","onSelectAddress","onUseNewAddress","handleUseNewAddress","useCallback","address","handleSelectAddress","alt","src","map","optionName","value","nameId","AddressSelect","selectedAddress","shippingAddress","getRecommendedShippingOption","availableShippingOptions","ShippingOptionListItem","consignmentId","shippingOption","renderLabel","StaticShippingOption","displayAdditionalInformation","method","ChecklistItem","htmlId","label","inputName","shippingOptions","selectedShippingOptionId","onSelectedOption","handleSelect","Checklist","defaultSelectedItemId","onSelect","selectDefaultShippingOptions","this","selectShippingOption","getConsignments","selectedShippingOption","recommendedOption","singleShippingOption","defaultShippingOption","componentDidMount","subscribeToConsignments","unsubscribe","componentWillUnmount","render","isMultiShippingMode","shouldShowShippingOptions","invalidShippingMessage","methodId","renderConsignment","ChecklistSkeleton","additionalClassName","rows","renderNoShippingOptions","role","StaticAddress","StaticConsignmentItemList","PureComponent","noop","shippingOptionIds","forEach","ShippingOptionsForm","subscribeToConsignmentsSelector","createSelector","subscribe","subscriber","isLoadingSelector","_","isLoadingShippingOptions","isSelectingShippingOption","isUpdatingConsignment","isCreatingConsignments","isUpdatingAddress","withCheckout","checkoutService","checkoutState","getCart","getConfig","getCustomer","getCheckout","customer","config","unsortedConsignments","shippableItems","consignmentsOrder","uniq","sortBy","sortConsignments","checkoutSettings","selectConsignmentShippingOption","cartHasChanged","shouldShowOrderComments","shouldDisableSubmit","Fieldset","legend","Legend","Alert","ShippingOptions","OrderComments","updateShippableItems","items","updatedItemIndex","cartItemIds","updatedConsignment","isEqualAddress","newId","matchingCartItems","filter","matchingCartItemIds","findNewItemId","state","handleCloseErrorModal","setState","createCustomerAddressError","handleSaveAddress","createCustomerAddress","itemAddingAddress","mapAddressFromFormValues","Error","itemKey","handleCloseAddAddressForm","assignItem","onUnhandledError","isValidAddress","syncItems","hasSelectedShippingOptions","currentItems","findIndex","getDerivedStateFromProps","getShippableItemsCount","isGuest","onSignIn","onCreateAccount","TranslatedLink","ErrorModal","error","onClose","shouldShowErrorCode","hasUnassignedLineItems","onSubmit","orderComment","enableReinitialize","MultiShippingForm","onChange","labelContent","useMemo","CheckboxFormField","handleFieldValueChange","onFieldChange","initialize","deinitialize","containerId","tabIndex","field","DynamicFormField","parentFieldName","addressFieldName","fieldName","fieldValue","formFieldName","custom","handleChange","handleAutocompleteToggle","inputValue","onAddressSelect","formAddress","hasAddresses","hasValidCustomerAddress","isValidCustomerAddress","unmountContentWhenLoading","onAutocompleteToggle","Component","ShippingAddressForm","buttonId","customFormFields","shouldShowCustomFormFields","style","padding","size","hasRequestedShippingOptions","isShippingStepPending","setSubmitted","useContext","initializeShipping","memoizeOne","defaultOptions","amazon","container","onError","editAddressButtonId","amazonpay","SHIPPING_ADDRESS_FIELDS","isResettingAddress","isUpdatingShippingData","isValid","handleFieldChange","Promise","resolve","setTimeout","isShippingField","updateAddressWithFormData","handleAddressSelect","updateAddress","setValues","mapAddressToFormValues","deleteConsignments","debouncedUpdateAddress","debounce","includeShippingOptions","params","include","addressForm","shouldShowBillingSameAsShipping","some","updatedShippingAddress","contextType","billingSameAsShipping","isInitialValid","isValidSync","formValues","getCustomFormFieldsValidationSchema","SingleShippingForm","customerMessage","isBillingSameAsShipping","onMultiShippingSubmit","onSingleShippingSubmit","shouldShowAddAddressInCheckout","signOut","ShippingForm","onMultiShippingChange","shouldShowMultiShipping","width","step","isStripeLoading","isStripeAutoStep","useState","isNewAddress","setIsNewAddress","isFirstShippingRender","setIsFirstShippingRender","stripeShippingAddress","setStripeShippingAddress","handleLoading","useEffect","availableShippingList","code","allowedCountries","join","handleStripeShippingAddress","shipping","complete","line1","line2","postal_code","isComplete","names","bigcommerceStates","StripeStateMapper","shippingValue","current","getStylesFromElement","parentContainer","getElementById","getStripeStyles","formInput","formLabel","formError","labelText","color","fieldText","fieldPlaceholderText","fieldErrorText","fieldBackground","fieldInnerShadow","fieldBorder","stripeupe","onChangeShipping","availableCountries","getStyles","gatewayId","placeholder","StripeShippingForm","stripeLoadedCallback","handleIsAutoStep","shippingFormProps","display","hideContentWhenLoading","handleMultiShippingModeSwitch","onToggleMultiShipping","updateShippingAddress","isInitializing","handleSingleShippingSubmit","addressValues","updateCheckout","updateBillingAddress","navigateNextStep","billingAddress","promises","hasRemoteBilling","push","all","unassignItem","location","handleMultiShippingSubmit","loadShippingAddressFields","loadShippingOptions","loadPaymentMethods","onReady","initializeShippingMethod","deinitializeShippingMethod","isStripeLinkEnabled","email","AddressFormSkeleton","deleteConsignmentsSelector","deleteConsignment","getShippingAddress","mapToShippingProps","getBillingAddress","getShippingAddressFields","getShippingCountries","getPaymentMethod","isCreatingCustomerAddress","isLoadingShippingCountries","isUpdatingBillingAddress","isUpdatingCheckout","enableOrderComments","features","hasMultiShippingEnabled","shippableItemsCount","stripeUpe","PaymentMethodId","linkEnabled","initializationData","enableLink","stripeUpeSupportedCurrency","currency","stripeUpeLinkEnabled","assignItemsToAddress","deinitializeShipping","signOutCustomer","unassignItemsToAddress","isFloatingLabelEnabled","Shipping","createContext","onToggle","getContextValue","selectedItemId","handleToggleItem","isDisabled","children","AccordionContext","ChecklistContext","contextValue","Provider","bodyClassName","classNameSelected","headerClassName","headerClassNameSelected","headerContent","isSelected","transitionEndListener","node","done","addEventListener","CSSTransition","addEndListener","classNames","in","mountOnEnter","timeout","unmountOnExit","Input","checked","Label","htmlFor","content","rest","renderInput","Function","selectedValue","renderHeaderContent","BasicFormField"],"sourceRoot":""}